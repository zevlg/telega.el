#+options: timestamp:nil \n:t num:nil ellit-cid:t
#+title: Telega Manual (v0.8.111)
#+author: Zajcev Evgeny
#+startup: showall

#+macro: nl          (eval (concat "\n" (make-string (1- (string-to-number $1)) ?\s)))
#+macro: user-option-ndv User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc($1, $2)}}} {{{nl(1)}}}
#+macro: user-option User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}
#+macro: user-option1 User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc1($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}

#+macro: temexdoc    (eval (ellit--indented-docstring (ellit-org--fundoc (telega-match--temex-function (intern $1) (intern (string-trim $2)))) $3))

#+begin_quote
This version of the manual for bleeding edge =telega= from "master"
branch running under bleeding edge TDLib from "master" branch. For
release version of the manual switch to [[https://zevlg.github.io/telega.el/index-release.html][Telega Manual (release)]].

This file is automatically generated from =telega-ellit.org= by
[[https://github.com/zevlg/ellit-org.el][GitHub#ellit-org.el]] tool.
Do not edit manually.  Modify =telega-ellit.org= or comments in
=.el= files instead.
#+end_quote

* Contents                                                     :nohtmlexport:
:PROPERTIES:
:CUSTOM_ID: contents
:END:

  - [[#introduction][Introduction]]
  - [[#installation][Installation]]
    - [[#dependencies][Dependencies]]
    - [[#macos-users][MacOS users]]
    - [[#linux-users][Linux users]]
    - [[#windows-10-users][Windows 10 users]]
    - [[#building-tdlib][Building TDLib]]
    - [[#installing-telega-and-tdlib-from-gnu-guix][Installing telega and TDLib from GNU Guix]]
    - [[#installing-telega-from-melpa][Installing telega from MELPA]]
    - [[#installing-telega-directly-from-github][Installing telega directly from GitHub]]
    - [[#running-telega-server-in-docker][Running telega-server in docker]]
  - [[#getting-started][Getting started]]
  - [[#settings-for-emacs-as-daemon][Settings for Emacs As Daemon]]
  - [[#telega-glossary][Telega glossary]]
  - [[#telega-prefix-map][Telega prefix map]]
  - [[#root-buffer][Root Buffer]]
    - [[#rootbuf-fast-navigation][Rootbuf fast navigation]]
    - [[#rootbuf-view-switching][Rootbuf view switching]]
    - [[#voicevideo-calls][Voice/Video calls]]
  - [[#telega-match-expressions][Telega Match Expressions]]
    - [[#list-of-chat-temexes][List of Chat Temexes]]
    - [[#list-of-message-temexes][List of Message Temexes]]
    - [[#list-of-user-temexes][List of User Temexes]]
    - [[#list-of-message-sender-temexes][List of Message Sender Temexes]]
    - [[#customizable-options-making-use-of-telega-match-expressions][Customizable options making use of Telega Match Expressions]]
  - [[#chat-folders][Chat Folders]]
  - [[#filtering-chats][Filtering chats]]
  - [[#sorting-chats][Sorting chats]]
    - [[#sorting-criteria][Sorting criteria]]
    - [[#customizable-options-making-use-of-sorting-criteria][Customizable options making use of sorting criteria]]
  - [[#chat-buffer][Chat buffer]]
    - [[#chatbuf-fast-navigation][Chatbuf fast navigation]]
    - [[#sending-ordinary-messages][Sending ordinary messages]]
    - [[#attaching-media][Attaching media]]
    - [[#replying-and-editing-messages][Replying and editing messages]]
    - [[#forwarding-messages][Forwarding messages]]
    - [[#deleting-messages][Deleting messages]]
    - [[#scheduling-messages-and-reminders][Scheduling messages and reminders]]
    - [[#navigating-previous-input][Navigating previous input]]
    - [[#completing-input-in-chatbuf][Completing input in chatbuf]]
      - [[#using-capf-for-input-completions][Using capf for input completions]]
    - [[#sending-messages-via-bots][Sending messages via bots]]
    - [[#filtering-chat-messages-aka-shared-media][Filtering chat messages a.k.a. Shared Media]]
    - [[#opening-files-using-external-programs][Opening files using external programs]]
    - [[#client-side-messages-ignoring][Client side messages ignoring]]
    - [[#favorite-messages][Favorite messages]]
    - [[#media-controls-for-media-messages][Media Controls for media messages]]
  - [[#video-chats][Video Chats]]
  - [[#stickers--animations][Stickers / Animations]]
    - [[#animated-stickers][Animated stickers]]
    - [[#favorite-and-recently-used-stickers][Favorite and recently used stickers]]
    - [[#animations][Animations]]
  - [[#multiple-accounts][Multiple accounts]]
  - [[#minor-modes][Minor Modes]]
    - [[#notifications-for-incoming-messages][Notifications for incoming messages]]
    - [[#telega-mode-line-mode][telega-mode-line-mode]]
    - [[#telega-appindicator-mode][telega-appindicator-mode]]
    - [[#telega-autoplay-mode][telega-autoplay-mode]]
    - [[#telega-squash-message-mode][telega-squash-message-mode]]
    - [[#telega-image-mode][telega-image-mode]]
    - [[#telega-edit-file-mode][telega-edit-file-mode]]
    - [[#telega-highlight-text-mode][telega-highlight-text-mode]]
    - [[#telega-patrons-mode][telega-patrons-mode]]
    - [[#telega-my-location-mode][telega-my-location-mode]]
    - [[#telega-active-locations-mode][telega-active-locations-mode]]
    - [[#telega-active-video-chats-mode][telega-active-video-chats-mode]]
    - [[#telega-recognize-voice-message-mode][telega-recognize-voice-message-mode]]
    - [[#telega-auto-translate-mode][telega-auto-translate-mode]]
    - [[#telega-root-auto-fill-mode][telega-root-auto-fill-mode]]
    - [[#telega-voip-sounds-mode][telega-voip-sounds-mode]]
  - [[#contributed-packages][Contributed packages]]
    - [[#ol-telegael--org-mode-links-to-telegram-chats-and-messages][/ol-telega.el/ -- Org mode links to telegram chats and messages]]
    - [[#telega-status-historyel--global-minore-mode-to-save-users-online-status-history][/telega-status-history.el/ -- Global minore mode to save user's online status history]]
    - [[#telega-url-shortenel--makes-urls-look-nicer][/telega-url-shorten.el/ -- Makes urls look nicer]]
    - [[#telega-alertel--notifications-using-alertel][/telega-alert.el/ -- Notifications using =alert.el=]]
    - [[#telega-dired-dwimel--attach-files-from-dired-in-dwim-style][/telega-dired-dwim.el/ -- Attach files from dired in DWIM style]]
    - [[#telega-live-locationel--manage-live-location-in-telega-using-geoel][/telega-live-location.el/ -- Manage live location in Telega using geo.el]]
    - [[#telega-mnzel--display-emacs-content-inside-telega-messages][/telega-mnz.el/ -- Display Emacs content inside Telega messages.]]
    - [[#telega-dashboardel--important-telega-chats-in-the-emacs-dashboard][/telega-dashboard.el/ -- Important telega chats in the Emacs dashboard]]
    - [[#telega-storiesel--display-emacs-stories-in-the-dashboard][/telega-stories.el/ -- Display Emacs Stories in the dashboard]]
    - [[#telega-transientel--transient-magit-like-style-commands-for-telega][/telega-transient.el/ -- Transient (magit-like style) commands for telega]]
    - [[#telega-adblockel--block-advertisement-messages][/telega-adblock.el/ -- Block advertisement messages]]
    - [[#telega-channels-exportel--export-telegam-channels-to-opml][/telega-channels-export.el/ -- Export Telegam channels to OPML]]
    - [[#telega-bridge-botel--replace-bridge-bot-user][/telega-bridge-bot.el/ -- Replace bridge bot user.]]
  - [[#troubleshooting][Troubleshooting]]
    - [[#cant-compile-telega-server][Can't compile =telega-server=]]
    - [[#invalid-tdlib-version][Invalid TDLib version]]
    - [[#stickers-are-not-shown][Stickers are not shown]]
    - [[#notifications-does-not-work][Notifications does not work]]

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

=telega= is full featured unofficial client for [[https://telegram.org][Telegram]] platform for [[https://www.gnu.org/software/emacs/][GNU Emacs]].

=telega= is actively developed, for this reason, some features are not
implemented, or they are present just as skeleton for future
implementation. However, the core parts are mature enough so that it
is possible to use =telega= on daily basis.

Join us at [[https://t.me/emacs_telega]]

If you enjoy =telega=, consider making a [[https://opencollective.com/telega][donation for unstoppable
development]], also see benefits you get [[#telega-patrons-mode][being telega patron]].

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

=telega= depends on the =visual-fill-column= and =rainbow-identifiers=
packages.  This dependency automatically installs if you install
=telega= from MELPA or GNU Guix.  Otherwise will you need to install
these packages by hand.

=telega= is built on top of the official library provided by Telegram
[[https://core.telegram.org/tdlib][TDLib]].  Most distributions do not provide this package in their
repositories, in which case you will have to install it manually by
following the instructions.

[[https://guix.gnu.org/][GNU Guix]], however, does have both =telega= and =TDLib= packaged.  If
you use GNU Guix you can skip directly to [[#installing-telega-and-tdlib-from-gnu-guix][Installing from GNU Guix]].

Also, you can use [[https://www.docker.com/][Docker]] to avoid complicated installation steps by
using one of the provided docker images.  See [[#running-telega-server-in-docker][Running telega-server in
docker]] for details.

** Dependencies
:PROPERTIES:
:CUSTOM_ID: dependencies
:END:

- =GNU Emacs= (at least 26.1 is required with svg support)
- =GNU make= (known as gmake on BSD platforms)
- =GNU gperf= (for building TDLib)
- =CMake= (for building TDLib)
- =pkg-config= (for building =telega-server=)

**Optional dependencies**:
- =Python= (optional, for testing the =telega-server=)
- =GNU Guix= _(optional, if using the Guix installation method)_
- =libappindicator3= (optional, to show =telega= icon/info in system
  tray)
- =dwebp= (optional, to display [[#stickers--animations][Stickers]])
- =tgs2png= (optional, for [[#animated-stickers][Animated Stickers]]), sources are at
  https://github.com/zevlg/tgs2png

=make= is found in most of the modern machines. The other packages can
be download with the system package manager (such as =apt= for
Debian-based distributions, =dnf= for Fedora or =pacman= for
Arch-based).

** MacOS users
:PROPERTIES:
:CUSTOM_ID: macos-users
:END:

1. If you are using [[https://emacsformacosx.com/][Emacs For Mac OS X]], or you installed Emacs by
   running ~$ brew cask install emacs~, make sure you installed a
   recent enough version (>= =emacs-27.1-mac-8.1=, you can check your
   version by running ~$ brew info emacs-mac~ or ~$ brew cask info
      emacs-mac~) with rsvg support (~$ brew install emacs-mac
      --with-librsvg~), or your Emacs may not display some media
   correctly, in this case consider switching to [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]].

2. If you are using [[https://bitbucket.org/mituharu/emacs-mac/][Emacs-mac]], or you installed Emacs by running ~$
      brew install emacs-mac~ or ~$ brew cask install emacs-mac~, your
   Emacs has bug dealing with complex svg, which leads to Emacs
   hangups.  Compiling Emacs with rsvg support by running ~$ brew
      install emacs-mac --with-librsvg~ will fix this problem.

   NOTE: =telega= cannot display stickers correctly with emacs-mac,
   even when emacs-mac is compiled with rsvg support.  If you want
   sticker support, please consider switching to emacs-plus.

3. [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] is the best choice to run =telega=.

** Linux users
:PROPERTIES:
:CUSTOM_ID: linux-users
:END:

=telega= requires at least GNU Emacs 26.1 with optional, but highly
recommended, =svg= support. If Emacs version is less then 27.1, then
=imagemagick= is also required.  Most distributions provide GNU Emacs
compiled with these dependencies when installing GNU Emacs with GTK+
support (graphical).

** Windows 10 users
:PROPERTIES:
:CUSTOM_ID: windows-10-users
:END:

See [[https://ritschmaster.github.io/2021/06/13/Using-telga-in-Windows-10.html][detailed description]] how to install =telega= under Windows 10.

Thanks to [[https://t.me/ritsch_master][=@ritsch_master=]]

** Building TDLib
:PROPERTIES:
:CUSTOM_ID: building-tdlib
:END:

[[https://core.telegram.org/tdlib][TDLib]] is the library for building Telegram clients. It requires a
large amount of memory to be built.  Make sure you are using TDLib
version greater or equal to 1.8.11.

On MacOS you can install a pre-built =TDLib= package using homebrew from
[[https://brew.sh][brew.sh]].  Just run:
#+begin_src shell
  $ brew install tdlib
#+end_src

On Linux, you will need to build =TDLib= from source.  Use 
[[https://tdlib.github.io/td/build.html][TDLib build instructions generator]] for comprehensive build
instructions.

In general, you need to install all [[https://github.com/tdlib/td/#dependencies][TDLib dependencies]] then get TDLib
sources and compile them using =CMake=.

To get the source:
#+begin_src shell
  $ git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with ~$ cd ./td~ or wherever you checked out
=td=.

Prepare a folder for building the library:
#+begin_src shell
  $ mkdir build && cd build && cmake ../
#+end_src

Build the sources:
#+begin_src shell
  $ make -jN
#+end_src

with ~N~ number of cores that should be used for the compilation (the
optimal value is the number of physical cores on the machine).

Finally, to install the library system-wide:
#+begin_src shell
  $ sudo make install
#+end_src

It will install headers to =/usr/local/include= and library itself
into =/usr/local/lib=.  If you have TDLib installed in other location,
don't forget to modify ~telega-server-libs-prefix~ before starting
=telega=.

** Installing telega and TDLib from [[https://guix.gnu.org/][GNU Guix]]
:PROPERTIES:
:CUSTOM_ID: installing-telega-and-tdlib-from-gnu-guix
:END:

=telega= and =TDLib= are both available in GNU Guix. If you have a
resource constrained machine or would simply prefer to bypass
compiling =TDLib= from source, this is a good option!

On Guix System:
#+begin_src shell
  $ guix package -i emacs-telega font-gnu-{unifont,freefont}
#+end_src

The latter two packages provide glyphs used by =telega=.

On "Foreign" Distributions:
- Use the shell installer script, or install GNU Guix manually on-top
  of your current distribution. [[https://guix.gnu.org/manual/en/html_node/Installation.html#Installation][Installation Documentation]]

- Enable fetching substitutes from the build server cache if you do
  not wish to build from source. [[https://guix.gnu.org/manual/en/html_node/Substitute-Server-Authorization.html#Substitute-Server-Authorization][Substitute Server Authorization]]

- And finally, run:
  #+begin_src shell
    $ guix package -i emacs emacs-telega
  #+end_src

It is easiest to use the version of Emacs installed from GNU Guix
because it is modified with an autoloader to identify and
automatically use Emacs packages installed from Guix. Alternatively,
if you wish to use the bundle of Emacs provided by your distribution,
you may install the =telega= elisp sources through MELPA and use Guix
to provide the server binary precompiled.

Consult the official GNU Guix documentation for further
questions. Issues related to the GUIX package must be accompanied by
the [[https://github.com/zevlg/telega.el/labels/guix][GUIX label]] in the issue tracker.

Do note that since =telega= is actively maintained installations from
Guix might at times lag behind master, but regular attempts to keep it
updated will occur.  If the version in Guix is too outdated or is
missing a feature, please use the protocol for the issue tracker.

** Installing telega from MELPA
:PROPERTIES:
:CUSTOM_ID: installing-telega-from-melpa
:END:

=telega= is available from [[https://melpa.org][MELPA]], so you can install it from there as
usual package.  This is a preferable method, because it will
automatically handle all dependencies and provides autoloads.

For TDLib 1.8.0 release you might
consider stable =telega= version.  Stable =telega= version won't
require you to rebuild TDLib until next TDLib 1.9.0 release, =telega= updates will work with
1.8.0.  Stable =telega= is placed
in [[https://stable.melpa.org/][MELPA Stable]].  Package configuration for =telega= from MELPA Stable
might look like:
#+begin_src emacs-lisp
  (add-to-list 'package-archives
  	     '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-pinned-packages '(telega . "melpa-stable"))
#+end_src

=telega= from unstable [[https://melpa.org][MELPA]] is a bleeding edge of the =telega=
development and =telega= updates might require also TDLib
update/rebuild sometimes.  However, it brings you all newer (probably
incompatible with TDLib 1.8.0)
functionality faster, no need to wait for TDLib 1.9.0 to access newer features.

Or you could use git repository with this melpa-style recipe for [[https://github.com/quelpa/quelpa][quelpa]]:

#+begin_src emacs-lisp
  (quelpa '(telega :fetcher github
  		 :repo "zevlg/telega.el"
  		 :branch "master"
  		 :files (:defaults "contrib" "etc" "server" "Makefile")))
#+end_src

** Installing telega directly from GitHub
:PROPERTIES:
:CUSTOM_ID: installing-telega-directly-from-github
:END:

Make sure dependencies are installed with @@html:<kbd>@@M-x package-install RET visual-fill-column RET@@html:</kbd>@@ and @@html:<kbd>@@M-x package-install RET rainbow-identifiers RET@@html:</kbd>@@.

Get the source:
#+begin_src shell
  $ git clone https://github.com/zevlg/telega.el
  $ cd telega.el
  $ make compile
#+end_src

Finally load =telega= into Emacs using:
#+begin_src emacs-lisp
  (use-package telega
    :load-path  "~/telega.el"
    :commands (telega)
    :defer t)
#+end_src

Or with:
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/telega.el")
  (require 'telega)
#+end_src

The code should be put in the configuration file for Emacs, which
usually is =init.el=, or =emacs.el=.

** Running telega-server in docker
:PROPERTIES:
:CUSTOM_ID: running-telega-server-in-docker
:END:

Pull latest =telega-server= image:
#+begin_src shell
  $ docker pull zevlg/telega-server:latest
#+end_src

Make =telega= know you want to use docker by adding this to your =init.el=:
#+begin_src emacs-lisp
  (setq telega-use-docker t)
#+end_src

That's it, you are ready to get starting.  However, you might anyway
need to have local =ffmpeg= installation to utilize some =telega=
features, such as playing audio/voice messages, capturing video/voice
notes, etc.

* Getting started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:

Start =telega= with @@html:<kbd>@@M-x telega RET@@html:</kbd>@@. The first time it will
ask for the phone number you have associated with the Telegram
network.

Some options affecting =TDLib= runtime:
- User Option: ~telega-directory~ 

  Directory for telega runtime files.
  Set this variable before loading telega, because other variables
  depends on ~telega-directory~ value.


Default value: "~/.telega"

- User Option: ~telega-options-plist~ 

  Plist of options to set.
  To use custom language pack (from "tdesktop" localization target),
  add ~:language_pack_id~ option.
  Only writable options can be set.  See: https://core.telegram.org/tdlib/options 

  Default value: ~(:online t :localization_target "tdesktop")~
- User Option: ~telega-proxies~ 

  List of proxies.
  Format is:
    (:server "<ADDRESS>" :port <PORT> :enable <BOOL> :type <PROXY-TYPE>)

  where PROXY-TYPE is one of:
  - (:@type "proxyTypeSocks5" :username <USER> :password <PASSWORD>)
  - (:@type "proxyTypeHttp" :username <USER> :password <PASSWORD>
    :http_only <BOOL>)
  - (:@type "proxyTypeMtproto" :secret <SECRET-STRING>)

  <BOOL> is either t or ~:false~, nil is not valid value. 

  Default value: ~nil~
- User Option: ~telega-my-location~ 

  Set to non-nil to use this as location of me.
  Plist in form (:latitude <LAT> :longitude <LONG>)
  To publically expose this location set ~:is_location_visible~ to
  non-nil in ~telega-options-plist~.
  Used to calculate distances from other peers to me. 

  Default value: ~nil~

  See also [[#telega-my-location-mode][telega-my-location-mode]] to automatically update
  ~telega-my-location~ when you send location message to the
  "Saved Messages" using mobile Telegram client.

To list all available customizable user options use ~M-x
customize-group RET telega RET~ command.

* Settings for Emacs As Daemon
:PROPERTIES:
:CUSTOM_ID: settings-for-emacs-as-daemon
:END:

Some people starts Emacs in daemon mode, i.e. =emacs --daemon=.  Such
Emacs instance has no frames, frames are created when needed and
connects to the daemon process.

=telega= autodetects values for some variables at load time by
examining current frame parameters and window system possibilities.
This won't work in daemon mode.  You need to explicitly specify values
for that variables.  Most notable options are:
- User Option: ~telega-use-images~ 

  Non-nil to show images.
  Explicitly set it to non-nil if using Emacs as a service and
  want to create X frames to show images.
  See https://zevlg.github.io/telega.el/#settings-for-emacs-as-daemon

- User Option: ~telega-emoji-font-family~ 

  Font to use for emoji image generation using ~telega-emoji-create-svg~.

- User Option: ~telega-emoji-use-images~ 

  Non-nil to use images for emojis.

- User Option: ~telega-online-status-function~ 

  Function used to determine if user is online.
  Function should return non-nil if user is online, and nil if offline.
  See https://github.com/zevlg/telega.el/issues/171


Setting ~telega-use-images~ **before** loading =telega= is essential,
because many other custom options depends on its value.

* Telega glossary
:PROPERTIES:
:CUSTOM_ID: telega-glossary
:END:

Before start, please read [[https://core.telegram.org/tdlib/getting-started#tdlib-glossary][TDLib glossary]]

=telega= tries to keep TDLib's terminology, however introduces some
new terms specific to =telega=.  All of them are used in the manual.

- Root Buffer a.k.a. rootbuf :: 
     Buffer with list of chats, you see it just after @@html:<kbd>@@M-x telega RET@@html:</kbd>@@.
     Most of the time rootbuf term is used in the manual.
     See [[#root-buffer][Root Buffer]]

- Root View :: 
     Root Buffer can be shown in different ways.  Way rootbuf is shown is
     called root view.
     See [[#root-buffer][Root Buffer]]

- Chat Buffer a.k.a. chatbuf :: 
     Buffer with chat contents.
     See [[#chat-buffer][Chat Buffer]]

- Button :: 
     Ordinary Emacs Button (see =button.el=).  Some outlined area with
     text, that can be acted on.  Pressing @@html:<kbd>@@RET@@html:</kbd>@@ on the
     button, executes button action.  There are many buttons of different
     kind in =telega=

- Chat Button :: 
     Button referring to some chat.  Action for such button is to open
     corresponding chatbuf.

     rootbuf lists the chat buttons, such as:
     #+begin_example
       {🎗Saved Messages            }📌  📹 Video (10s)               Fri✓
       [Emacs | Emacs (english)     ]  @oldosfan: same                Fri
       ...
     #+end_example

- Temex :: 
     Telega Match Expression - S-expression to match telega objects such
     as chats or messages.
     See [[#telega-match-expressions][Telega Match Expressions]] for the details.

- [Custom] Chat Filter :: 
     Named temex to filter chats in the rootbuf.

     Custom chat filters are displayed as buttons above the chat list in
     the rootbuf, such as:
     #+begin_example
       [243:📑Main      4890]  [51:Groups       4677]  [27:Channels      210]
       [53:Contacts         ]  [0:Important         ]  [3:📑Archive      670]
     #+end_example

     Action for such buttons is to add corresponding temex to the
     active chat filter.

     However, buttons that corresponds to a Telegram Folder, including
     "Main" and "Archive", substitutes folder in the active chat filter
     with new one at button.

  - User Option: ~telega-filter-button-width~ 

    Width of the custom filter buttons.
    If integer, then use this number of chars.
    If float in range (0..1), then occupy this percents of
    ~telega-root-fill-column~ chars, but not less then 15 chars.
    If list, where first element is float, then use 1 and 2 list values as
    min and max values for a width calculation using
    ~telega-canonicalize-number~. 

    Default value: ~(0.25 17 25)~
  - User Option: ~telega-filters-custom~ 

    Alist of custom filters in form (NAME . TEMEX).
    NAME can be an i18n string, such as "lng_filters_type_groups".
    This filters are displayed as filter buttons at the top of rootbuf. 

    Default value: 
    #+begin_src emacs-lisp
      (("Main" . main)
       ("Important" . important)
       ("Online" and
        (not saved-messages)
        (user is-online))
       ("lng_filters_type_groups" type basicgroup supergroup)
       ("lng_filters_type_channels" type channel)
       ("lng_filters_type_no_archived" . archive))
    #+end_src

  - User Option: ~telega-filter-custom-expand~ 

    Non-nil to expand custom filter when adding to active filters. 

    Default value: ~t~
  - User Option: ~telega-filter-custom-show-folders~ 

    Non-nil to show telegram folders along the side with custom filters. 

    Default value: ~t~

- Active Chat Filter :: 
     List of chat temexes applied to the chat list in rootbuf.

     Only chats matching **all** temexes in the active chat filter
     are displayed in rootbuf.  Active chat filter is displayed above the
     chat list in rootbuf, such as:
     #+begin_example
       -/------------------------------(main)--------------------------------
     #+end_example

     ~(telega-filter-active)~ returns active chat filter.

  - User Option: ~telega-filter-default~ 

    Temex to filter chats by default. 

    Default value: ~main~

- Chat Sort Criteria :: 
     List of symbols denoting how to sort chats.
     See [[#sorting-chats][Sorting Chats]]

- Active Sort Criteria a.k.a. active sorter :: 
     Sort criteria applied to the chat list in rootbuf.

     By default, chats are sorted according to internal Telegram order
     (except for chats with custom order).

     In case active sorter is enabled, it is displayed above the chat
     list in rootbuf, such as:
     #+begin_example
       -\---------------------(unread-count join-date)-----------------------
     #+end_example

- Me user a.k.a. me :: 
     User currently logged in, ~(telega-user-me)~ returns me.

     me means you, not me.

     Chat with me is also known as "Saved Messages".

* Telega prefix map
:PROPERTIES:
:CUSTOM_ID: telega-prefix-map
:END:

=telega= has prefix map for common =telega= commands, such as
switching to rootbuf, switch to "Saved Messages", sending current
buffer as file to a chat, switching accounts, opening chat or
switching to some chat.

It is convenient to have it somewhere accessible from ~global-map~,
say @@html:<kbd>@@C-c t@@html:</kbd>@@.  To do so use next code in your =init.el=:

#+begin_src
  (define-key global-map (kbd "C-c t") telega-prefix-map)
#+end_src

Or if =telega= is not accessible to autoload at start time, then use:

#+begin_src
  (add-hook 'telega-load-hook
  	  (lambda ()
  	    (define-key global-map (kbd "C-c t") telega-prefix-map)))
#+end_src

Telega prefix map bindings:

- @@html:<kbd>@@a@@html:</kbd>@@ (~telega-account-switch~) :: 
     Switch to the ~ACCOUNT-NAME~.

- @@html:<kbd>@@b@@html:</kbd>@@ (~telega-switch-buffer~) :: 
     Interactively switch to CHAT's buffer.
     Switch only if ~CHAT~ is opened, i.e. has corresponding chatbuf.

- @@html:<kbd>@@c@@html:</kbd>@@ (~telega-chat-with~) :: 
     Start messaging with ~CHAT-OR-USER~.

- @@html:<kbd>@@e@@html:</kbd>@@ (~telega-edit-file-switch-buffer~) :: 
     Interactively switch to ~BUFFER~ having ~telega-edit-file-mode~.

- @@html:<kbd>@@i@@html:</kbd>@@ (~telega-switch-important-chat~) :: 
     Switch to important ~CHAT~ if any.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is used, then select first chat if
     multiple chats are important.

- @@html:<kbd>@@f@@html:</kbd>@@ (~telega-buffer-file-send~) :: 
     Prepare ~FILE~ to be sent as document or photo to ~CHAT~.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is specified, then always send as a file.
     Otherwise ~FILE~ type is automatically detected.
     If called interactively, then file associated with current buffer
     is used as ~FILE~.
     If current buffer is dired, then send all marked files.

- @@html:<kbd>@@s@@html:</kbd>@@ (~telega-saved-messages~) :: 
     Switch to "Saved Messages" chat buffer.
     If "Saved Messages" chat is not opened, then open it.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is specified, then goto prompt otherwise
     keep the point, where it is.

- @@html:<kbd>@@t@@html:</kbd>@@ (~telega~) :: 
     Start telega.el Telegram client.
     Pop to root buffer.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is specified, then do not pop to root buffer.

- @@html:<kbd>@@u@@html:</kbd>@@ (~telega-switch-unread-chat~) :: 
     Switch to next unread message in next unread ~CHAT~.
     ~CHAT~ considered unread if matches ~telega-unread-chat-temex~.

     Customizable options:
  - User Option: ~telega-unread-chat-temex~ 

    Chat Temex for ~telega-switch-unread-chat~ command. 

    Default value: ~(and main unread)~

- @@html:<kbd>@@w@@html:</kbd>@@ (~telega-browse-url~) :: 
     Open the ~URL~.
     If ~URL~ can be opened directly inside telega, then do it.
     Invite links and link to users can be directly opened in telega.
     If ~IN-WEB-BROWSER~ is non-nil then force opening in web browser.

* Root Buffer
:PROPERTIES:
:CUSTOM_ID: root-buffer
:END:

rootbuf is the heart of the =telega=.  Switch to rootbuf with
@@html:<kbd>@@M-x telega RET@@html:</kbd>@@ or use
@@html:<kbd>@@t@@html:</kbd>@@ (~telega~) binding from the
[[#telega-prefix-map][Telega prefix map]].

*TODO*: describe parts of the rootbuf: status, custom-filters,
*folders, active chat filter, active chat sorter

rootbuf lists chats filtered by active chat filter.  Press
@@html:<kbd>@@h@@html:</kbd>@@, @@html:<kbd>@@i@@html:</kbd>@@ (~telega-describe-chat~) to get
detailed description of the chat at point.

Important customizable options:
- User Option: ~telega-root-fill-column~ 

  Maximum width to use in root buffer to display active filters and chats. 

  Default value: ~70~

  This option is applied only if [[#telega-root-auto-fill-mode][telega-root-auto-fill-mode]] is
  disabled.  Default behaviour is to automatically adjust
  ~telega-root-fill-column~ to the width of the window displaying
  rootbuf.

- User Option: ~telega-root-keep-cursor~ 

  Non-nil to keep cursor at current chat, even if chat's order changes.
  Set to ~track~, to move cursor to corresponding chat button, when
  chat buffers are switched, useful in side-by-side window setup
  for rootbuf and chatbuf.

  Consider setting ~switch-to-buffer-preserve-window-point~ to nil,
  to make ~telega-root-keep-cursor~ always work as expected. 

  Default value: ~track~

** Rootbuf fast navigation
:PROPERTIES:
:CUSTOM_ID: rootbuf-fast-navigation
:END:

@@html:<kbd>@@M-g@@html:</kbd>@@ prefix in rootbuf is used to jump across chat buttons:

- @@html:<kbd>@@M-g u@@html:</kbd>@@ (~telega-root-next-unread~) :: 
     Move point to the next chat with unread message.

- @@html:<kbd>@@M-g i@@html:</kbd>@@ (~telega-root-next-important~) :: 
     Move point to the next important chat.

     Chat is important if matches ~telega-important-chat-temex~
     [[#telega-match-expressions][temex]].

- @@html:<kbd>@@M-g @@@html:</kbd>@@, @@html:<kbd>@@M-g m@@html:</kbd>@@ (~telega-root-next-mention~) :: 
     Move point to the next chat with mention.

- @@html:<kbd>@@M-g !@@html:</kbd>@@ (~telega-root-next-reaction~) :: 
     Move point to the next chat with unread reaction.

** Rootbuf view switching
:PROPERTIES:
:CUSTOM_ID: rootbuf-view-switching
:END:

Rootbuf view is the specific way how rootbuf is shown to the user.  By
default, list of the chats is shown, this is known as default root
view.

@@html:<kbd>@@v@@html:</kbd>@@ prefix in rootbuf is used to switch root views:
- @@html:<kbd>@@s@@html:</kbd>@@, @@html:<kbd>@@v s@@html:</kbd>@@ (~telega-view-search~) :: 
     View ~QUERY~ search results.

- @@html:<kbd>@@v n@@html:</kbd>@@ (~telega-view-nearby~) :: 
     View contacts and chats nearby ~telega-my-location~.

- @@html:<kbd>@@v v@@html:</kbd>@@ (~telega-view-reset~) :: 
     Reset rootview to the default value.

- @@html:<kbd>@@v 0@@html:</kbd>@@ (~telega-view-compact~) :: 
     Compact view for the rootbuf.

- @@html:<kbd>@@v 1@@html:</kbd>@@ (~telega-view-one-line~) :: 
     View chat list as one line.

- @@html:<kbd>@@v 2@@html:</kbd>@@ (~telega-view-two-lines~) :: 
     View chat list as 2 lines.

- @@html:<kbd>@@v t@@html:</kbd>@@ (~telega-view-topics~) :: 
     Group chats by ~telega-root-view-topics~.

     Customizable options:
  - User Option: ~telega-root-view-topics~ 

    Alist of topics for "topics" root view.
    Car is name of the topic, cdr is chat filter to match chats. 

    Default value: ~(("Important" . important))~
  - User Option: ~telega-root-view-topics-folders~ 

    Non-nil to add Chat Folders to the list of topics.
    Could be one of ~prepend~, ~append~ or nil. 

    Default value: ~append~
  - User Option: ~telega-root-view-topics-other-chats~ 

    Non-nil to show other chats in the "topics" root view. 

    Default value: ~t~

- @@html:<kbd>@@v F@@html:</kbd>@@ (~telega-view-files~) :: 
     View status of files known to telega.
     File can be in one of the state kinds: "downloading", "uploading",
     "partially-downloaded", "partially-uploaded", "downloaded".
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is specified, then query user about file
     state kinds to show. By default all kinds are shown.

     If you use this view frequently, consider setting
     ~telega-chat-upload-attaches-ahead~ to nil, to avoid file
     duplications for "uploading" kind. See
     https://github.com/tdlib/td/issues/1348#issuecomment-752654650
     for details

     Press @@html:<kbd>@@d@@html:</kbd>@@ under downloaded filename to delete the
     file.  Only files cached by TDLib in the ~telega-cache-dir~
     can be deleted.

     Customizable options:
  - User Option: ~telega-root-view-files-exclude-subdirs~ 

    Alist specifying which subdirs to exclude when viewing files.
    car of each element is predicate matching file, and rest is list of
    subdirectories to ignore, i.e. if absolute file name contains any of
    the subdirectory in list, then file is ignored.
    Supported predicates: ~telega-file--downloading-p~,
    ~telega-file--uploading-p~, ~telega-file--downloaded-p~,
    ~telega-file--uploaded-p~, ~telega-file--partially-downloaded-p~,
    ~telega-file--partially-uploaded-p~ 

    Default value: ~((telega-file--downloaded-p "thumbnails" "profile_photos"))~
  - User Option: ~telega-chat-upload-attaches-ahead~ 

    Non-nil to upload attachments ahead, before message actually sent.
    Having this non-nil "speedups" uploading, it is like files uploads instantly. 

    Default value: ~t~

- @@html:<kbd>@@v T@@html:</kbd>@@ (~telega-view-top~) :: 
     View top chats in all categories.

     Customizable options:
  - User Option: ~telega-root-view-top-categories~ 

    List of top categories with limits. 

    Default value: 
    #+begin_src emacs-lisp
      (("Users" . 10)
       ("Groups" . 10)
       ("Channels" . 10)
       ("Bots" . 10)
       ("InlineBots" . 10)
       ("Calls" . 10)
       ("ForwardChats" . 10))
    #+end_src


- @@html:<kbd>@@v S@@html:</kbd>@@ (~telega-view-settings~) :: 
     View and edit your Telegram settings.

- @@html:<kbd>@@v c@@html:</kbd>@@ (~telega-view-contacts~) :: 
     View contacts searched by ~QUERY~.
     If ~QUERY~ is empty string, then show all contacts.

- @@html:<kbd>@@v C@@html:</kbd>@@, @@html:<kbd>@@c l@@html:</kbd>@@ (~telega-view-calls~) :: 
     View calls.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then view missed calls only.

- @@html:<kbd>@@v l@@html:</kbd>@@ (~telega-view-last-messages~) :: 
     View last messages in the chats.

- @@html:<kbd>@@v f@@html:</kbd>@@ (~telega-view-folders~) :: 
     View Telegram folders.

- @@html:<kbd>@@v d@@html:</kbd>@@ (~telega-view-deleted-chats~) :: 
     View recently deleted chats.

- @@html:<kbd>@@v *@@html:</kbd>@@ (~telega-view-favorite-messages~) :: 
     View favorite messages in all the chats.

Important customizable options:
- User Option: ~telega-root-default-view-function~ 

  Default view for the rootbuf. 

  Default value: ~telega-view-default~

  @@html:<kbd>@@v v@@html:</kbd>@@ (~telega-view-reset~) uses this
  function to reset root view.

** Voice/Video calls
:PROPERTIES:
:CUSTOM_ID: voicevideo-calls
:END:

Telegram provides nice voice/video calls.

**TODO** more documentation about voice/video calls support by
=telega=.

@@html:<kbd>@@c@@html:</kbd>@@ prefix in rootbuf is used to call VoIP commands:
- @@html:<kbd>@@c c@@html:</kbd>@@ (~telega-chat-call~) :: 
     Call to the user associated with the given private ~CHAT~.

- @@html:<kbd>@@c a@@html:</kbd>@@ (~telega-voip-accept~) :: 
     Accept last incoming ~CALL~.
     Discard active call if any.

- @@html:<kbd>@@c d@@html:</kbd>@@ (~telega-voip-discard~) :: 
     Discard the ~CALL~.
     If called interactively then discard active call.

- @@html:<kbd>@@c b@@html:</kbd>@@ (~telega-voip-buffer-show~) :: 
     Show callbuf for the CALL.

- @@html:<kbd>@@v C@@html:</kbd>@@, @@html:<kbd>@@c l@@html:</kbd>@@ (~telega-view-calls~) :: 
     View calls.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then view missed calls only.

* Telega Match Expressions
:PROPERTIES:
:CUSTOM_ID: telega-match-expressions
:END:

Telega Match Expression (temex in short) is a verbal expression to
match TDLib objects.  Temex uses S-exp notation similar to ~rx~
package for regexps.

Primitive Temex is a named predicate returning non-nil if matches
some object.  Primitive Temexes can be combined using ~and~, ~or~
or ~not~ temexes, so temex is a logical combination of other
temexes down to Primitive Temexes.

~telega-match-gen-predicate~ can be used to generate predicate
functions out of temex.

Chat Temex examples:
- ~(return t)~ :: 
     Matches all chats.

- ~(or saved-messages (type channel bot))~ :: 
     Matches bots/channels chats or "Saved Messages" chat.

- ~(and unmuted (unread 10) (mention 1))~ :: 
     Matches unmuted chats with at least 10 unread messages and at
     least one message with unread mention.

Message Temex examples:
- ~(sender me)~ :: 
     Matches all messages sent by me.

- ~(or (prop :contains_unread_mention) unread-reactions)~ :: 
     Matches messages containing unread mention or reaction.

- ~(and (chat (type channel)) (type text) (contains "\shello\s"))~ :: 
     Matches channel's text messages containing "hello" word.

List of temexes you can apply to any TDLib object:

- (return ~RET~) :: 
     Matches if ~RET~ is non-nil and return ~RET~ as a result.

- (or ~TEMEX-LIST~...) :: 
     Matches if any matcher in the ~TEMEX-LIST~ matches.

- (and ~TEMEX-LIST~...) :: 
     Matches if all matchers in the ~TEMEX-LIST~ matches.
     Also matches if ~TEMEX-LIST~ is empty.

- (not ~TEMEX~) :: 
     Matches if ~TEMEX~ does not match.

- (prop ~PROPERTY~) :: 
     Matches if ~OBJ~ has non-nil ~PROPERTY~.

- (call ~PREDICATE~) :: 
     Matches if PREDICATED called with ~OBJ~ as argument returns non-nil.

- (ids ~ID-LIST~...) :: 
     Matches if OBJ's id is in the ~ID-LIST~.

** List of Chat Temexes
:PROPERTIES:
:CUSTOM_ID: list-of-chat-temexes
:END:

Use ~telega-chat-match-p~ to match a chat.

- (type ~CHAT-TYPE-LIST~), @@html:<kbd>@@/ t@@html:</kbd>@@ (~telega-filter-by-type~) :: 
     Matches if chat type is one of ~CHAT-TYPE-LIST~.

     Every chat has a type.  Type is one of:
  - ~private~ Private chat with a Telegram user
  - ~secret~ Secret chat with a Telegram user
  - ~bot~ Chat with a Telegram bot
  - ~basicgroup~ Small chat group, could be upgraded to supergroup
  - ~supergroup~ Chat group with all the chat possibilities
  - ~channel~ Supergroup with unlimited members, where only admins can post messages

- (name ~REGEXP~) :: 
     Matches if chat's title matches ~REGEXP~.

- (search ~QUERY~), @@html:<kbd>@@/ s@@html:</kbd>@@ (~telega-filter-by-search~) :: 
     Matches if chat maches search QUERY.

- nearby, @@html:<kbd>@@/ n@@html:</kbd>@@ (~telega-filter-by-nearby~) :: 
     Matches if chat is nearby ~telega-my-location~.

- (custom ~NAME~), @@html:<kbd>@@/ C@@html:</kbd>@@ (~telega-filter-by-custom~) :: 
     Matches if custom filter with ~NAME~ matches.

- (has-username [ ~USERNAME~ ]) :: 
     Matches if chat has username associated with the chat.

- is-public :: 
     Matches if chat is a public chat.
     Chat is considered public if it has a username.

- (unread [ ~N~ ]), @@html:<kbd>@@/ u@@html:</kbd>@@ (~telega-filter-by-unread~) :: 
     Matches if chat has at least ~N~ unread messages.
     By default ~N~ is 1.
     Also matches chats marked as unread.

- (mention [ ~N~ ]), @@html:<kbd>@@/ m@@html:</kbd>@@ (~telega-filter-by-mention~) :: 
     Matches if chat has least ~N~ unread mentions.
     By default ~N~ is 1.

- muted :: 
     Matches if chat has disabled notifications.

- temporary-muted :: 
     Matches if ~CHAT~ is temporary muted.

- unmuted, @@html:<kbd>@@/ y@@html:</kbd>@@ (~telega-filter-by-unmuted~) :: 
     Matches if chat has enabled notifications.

- important, @@html:<kbd>@@/ i@@html:</kbd>@@ (~telega-filter-by-important~) :: 
     Matches if chat is important.
     Chat is important if it matches ~telega-important-chat-temex~ chat filter.

- (me-is-owner [ ~OR-ADMIN~ ]) :: 
     Matches if me is owner of the chat.
     Only basicgroup, supergroup and channel can be owned.
     If optional ~OR-ADMIN~ is specified, then match also if me is
     administrator in the chat.

- me-is-member :: 
     Matches if me is member of the chat.
     Matches only basicgroup, supergroup or a channel.

- me-is-anonymous :: 
     Matches if me is anonymous in the chat.

- has-avatar :: 
     Matches if chat has chat photo.
     For non-nil ~ANIMATED-P~ match only if avatar is animated.

- has-chatbuf, @@html:<kbd>@@/ b@@html:</kbd>@@ (~telega-filter-by-has-chatbuf~) :: 
     Matches if chat has corresponding chatbuf.

- (permission ~PERM~) :: 
     Matches if chat has ~PERM~ set in chat permissions.
     ~PERM~ could be one of listed in ~telega-chat--chat-permisions~.

- (my-permission ~PERM~) :: 
     Matches if me has ~PERM~ permission in the chat.
     ~PERM~ could be one of in ~telega-chat--chat-permisions~ list or in
     ~telega-chat--admin-permissions~ list.

- verified, @@html:<kbd>@@/ v@@html:</kbd>@@ (~telega-filter-by-verified~) :: 
     Matches if chat is verified.

- (restriction ~SUFFIX-LIST~...), @@html:<kbd>@@/ r@@html:</kbd>@@ (~telega-filter-by-restriction~) :: 
     Matches restricted chats.
     ~SUFFIX-LIST~ is a list of suffixes to filter on.
     Suffix can be one of:
  - "-all"      - All platforms
  - "-ios"      - For iOS devices
  - "-android"  - For Android devices
  - "-wp"       - Windows?

  If ~SUFFIX-LIST~ is not specified, then match any restriction reason.

  Chat restriction reason reported only if chat must be restricted
  by current client.  See
  [[https://github.com/tdlib/td/issues/1203][TDLib#1203]]

- top, @@html:<kbd>@@/ T@@html:</kbd>@@ (~telega-filter-by-top~) :: 
     Matches if chat is in top usage.

- saved-messages :: 
     Matches only "Saved Messages" chat.

- replies-messages :: 
     Matches only "Replies" chat.

- tracking, @@html:<kbd>@@/ SPC@@html:</kbd>@@ (~telega-filter-by-tracking~) :: 
     Matches if chat is in tracking buffers list.

- last-message :: 
     Matches if chat's last message matches ~MSG-TEMEX~.

- (chat-list ~LIST-NAME~), @@html:<kbd>@@/ f@@html:</kbd>@@ (~telega-filter-by-folder~) :: 
     Matches if chat is in chat list named ~LIST-NAME~.
     ~LIST-NAME~ is ~main~ or ~archive~ symbol, or string naming Chat Folder.

- main :: 
     Matches if chat from "Main" chat list.

- archive :: 
     Matches if chat is archived, i.e. in "Archive" chat list.

- is-known :: 
     Matches if chat is known, i.e. in "Main" or "Archive" chat list.

- (folder ~FOLDER-NAME~...), @@html:<kbd>@@/ f@@html:</kbd>@@ (~telega-filter-by-folder~) :: 
     Matches if chat belongs to Folder named ~FOLDER-NAME~.

- has-scheduled-messages :: 
     Matches if chat has scheduled messages.

- has-action-bar :: 
     Matches if chat has active action bar.

- has-reply-markup :: 
     Matches if chat has reply markup message.

- can-get-statistics :: 
     Matches if statistics available for the ~CHAT~.

- has-linked-chat :: 
     Matches if ~CHAT~ is supergroup and has linked chat.

- has-discussion-group :: 
     Matches if ~CHAT~ is a channel with a linked discussion group.

- has-location :: 
     Matches if ~CHAT~ is supergroup and has linked chat.

- inactive-supergroups ,  (~telega-filter-by-inactive-supergroups~) :: 
     Matches if ~CHAT~ is inactive supergroup.

- default-disable-notification :: 
     Matches if ~CHAT~ has non-nil default disable notification setting.

- fake-or-scam :: 
     Matches if chat is fake or scam user or group.

- (has-video-chat [ ~NON-EMPTY~ ]) :: 
     Matches if chat contains a live video chat.
     If non-nil ~NON-EMPTY~ is specified, then match only if video chat is
     not empty.

- has-favorite-messages :: 
     Matches if chat has favorite messages.

- has-message-ttl :: 
     Matches if chat has ~:message_ttl~.

- is-broadcast-group :: 
     Matches if chat is a broadcast group.

- is-forum :: 
     Matches if chat is a forum group.

- has-sponsored-messages :: 
     Matches if chat has sponsored messages.
     BE AWARE: This filter will do blocking request for every chat.

- has-protected-content :: 
     Matches if chat has protected content.

- has-default-sender :: 
     Matches if chat allows choosing a message sender.

- can-send-or-post :: 
     Me can send or post messages to the ~CHAT~.
     Me don't need te be a ~CHAT~ member to be able to send messages.
     Additionally apply ~is-known~ chat filter to check ~CHAT~ is known.

- is-inline-bot :: 
     Matches if corresponding bot accepts inline requests.

- (unread-reactions [ ~N~ ])
  Matches if chat has least ~N~ unread reactions.
  By default ~N~ is 1.

- (user ~USER-TEMEX~) :: 
     Matches non-bot private chat where corresponding user matches ~USER-TEMEX~.

- (bot-user ~USER-TEMEX~) :: 
     Matches chat where corresponding bot user matches ~USER-TEMEX~.

** List of Message Temexes
:PROPERTIES:
:CUSTOM_ID: list-of-message-temexes
:END:

Use ~telega-msg-match-p~ to match a message.

- (type ~MSG-TYPE-LIST~) :: 
     Matches if message content type is equal to CONTENT-TYPE.

     Every message has a content type.  Most notable message types
     are: ~Text~, ~Animation~, ~Audio~, ~Document~, ~Photo~,
     ~Sticker~, ~Video~, ~VideoNote~, ~VoiceNote~, ~Location~, etc.

- seen :: 
     Return non-nil if message has been viewed in the chat.

- (unread-reactions [~N~]) :: 
     Matches if message has at least ~N~ unread reactions.
     By default ~N~ is 1.

- has-chosen-reaction :: 
     Matches if message has a reaction chosen by me.

- is-reply :: 
     Matches if message is a reply message.

- post-with-comments :: 
     Matches if message is a channel post that can be commented.

- is-topic :: 
     Matches if message is a forum topic message.

- web-page :: 
     Matches messages with webpage having property with ~PROPNAME~.

- (outgoing [ ~ANY-STATE-P~ ]) :: 
     Matches if message is an outgoing message.
     This temex differs from ~(sender me)~, matching any outgoing messages,
     including anonymous messages to channels created by me.

- (ignored [ ~REASON~ ]) :: 
     Matches if message is an ignored message.
     If ~REASON~ is specified, then match only if has been ignored by ~REASON~
     function.

- (contains ~REGEXP~ ) :: 
     Matches if message's text or caption contains ~REGEXP~.
     Matching ignores case.

- (chat ~CHAT-TEMEX~) :: 
     Matches if message's chat matches ~CHAT-TEMEX~.

- (sender ~SENDER-TEMEX~) :: 
     Matches if message's sender matches ~SENDER-TEMEX~.

- is-deleted :: 
     Matches deleted message.

- is-last :: 
     Matches if message is the last message in chat.

** List of User Temexes
:PROPERTIES:
:CUSTOM_ID: list-of-user-temexes
:END:

Use ~telega-user-match-p~ to match a user.

- is-deleted :: 
     Matches if user account is deleted.

- is-bot :: 
     Matches if user is a bot.

- (status ~STATUS-LIST~...) :: 
     Matches if user status is one of ~STATUS-LIST~.

     Each element in ~STATUS-LIST~ is one of: "Online", "Offline",
     "Recently", "LastWeek", "LastMonth" or "Empty"

- online
  Matches if user is online.
  Does not match bots, because bots are always online.

  Same as ~(status "Online")~ user temex.

- (contact [ ~MUTUAL-P~ ]), @@html:<kbd>@@/ c@@html:</kbd>@@ (~telega-filter-by-contact~) :: 
     Matches private chats if corresponding user is a contact.
     If ~MUTUAL-P~ is non-nil, then mach only if contact is mutual.

- (groups-in-common [ ~N~ ]) :: 
     Matches if corresponding user has at least ~N~ groups in common with me.
     By default ~N~ is 1.

- is-telega-patron :: 
     Matches if corresponding user is a telega patron.

- is-premium :: 
     Matches if corresponding user is a Telegram Premium user.

- has-private-forwards :: 
     Matches if user can't be linked in forwarded messages.

- has-emoji-status :: 
     Matches if corresponding user set his current emoji status.

- user-username :: 
     Matches if user's username matches ~USERNAME-REGEXP~.

** List of Message Sender Temexes
:PROPERTIES:
:CUSTOM_ID: list-of-message-sender-temexes
:END:

Use ~telega-sender-match-p~ to match a message sender.

- me :: 
     Matches if sender is me.

- blocked :: 
     Matches if sender is blocked.

- (user ~USER-TEMEX~) :: 
     Matches if sender is a user matching ~USER-TEMEX~.

- (chat ~CHAT-TEMEX~) :: 
     Matches if sender is a chat matching ~CHAT-TEMEX~.

** Customizable options making use of Telega Match Expressions
:PROPERTIES:
:CUSTOM_ID: customizable-options-making-use-of-telega-match-expressions
:END:

- User Option: ~telega-filter-default~ 

  Temex to filter chats by default. 

  Default value: ~main~
- User Option: ~telega-filters-custom~ 

  Alist of custom filters in form (NAME . TEMEX).
  NAME can be an i18n string, such as "lng_filters_type_groups".
  This filters are displayed as filter buttons at the top of rootbuf. 

  Default value: 
  #+begin_src emacs-lisp
    (("Main" . main)
     ("Important" . important)
     ("Online" and
      (not saved-messages)
      (user is-online))
     ("lng_filters_type_groups" type basicgroup supergroup)
     ("lng_filters_type_channels" type channel)
     ("lng_filters_type_no_archived" . archive))
  #+end_src

- User Option: ~telega-use-tracking-for~ 

  Specifies Chat Filter for chats to be tracked with tracking.el.
  Make sure you have tracking.el loaded if this option is used.
  Only chats with corresponding opened chatbuf are tracked.
  Tracking notifications for telega buffers will use the
  `telega-tracking` face. 

  Default value: ~nil~
- User Option: ~telega-rainbow-color-custom-for~ 

  List of custom colors for chats.
  Each element is cons cell, where car is Chat Filter, and cdr is color. 

  Default value: ~((saved-messages))~
- User Option: ~telega-chat-prompt-format~ 

  Modeline compatible format for the chatbuf input prompt.
  You can use ~telega-chatbuf-editing-msg~ or
  ~telega-chatbuf-replying-msg~ in ~:eval~ section if you want different
  prompt when editing/replying a message. 

  Default value: 
  #+begin_src emacs-lisp
    ((:eval
      (telega-chatbuf-prompt-default-sender-avatar))
     (:eval
      (telega-chatbuf-prompt-body))
     (:eval
      (when
          (and telega-use-images
    	   (telega-chatbuf-match-p 'can-send-or-post))
        (telega-chatbuf-prompt-chat-avatar)))
     (:eval
      (when
          (and telega-auto-translate-mode telega-chatbuf-language-code telega-translate-to-language-by-default
    	   (not
    	    (equal telega-chatbuf-language-code telega-translate-to-language-by-default)))
        (propertize
         (format "[%s→%s]" telega-translate-to-language-by-default telega-chatbuf-language-code)
         'face 'telega-shadow)))
     ">>> ")
  #+end_src

- User Option: ~telega-chat-group-messages-for~ 

  Chat Filter for chats where to group messages by sender. 

  Default value: 
  #+begin_src emacs-lisp
    (not
     (or saved-messages
         (type channel bot)))
  #+end_src

- User Option: ~telega-chat-show-deleted-messages-for~ 

  Chat Filter for chats where to show deleted messages in chatbuf. 

  Default value: ~nil~
- User Option: ~telega-chat-use-date-breaks-for~ 

  Chat Filter for chats where to insert date breaks.
  Date break is a special mark separating two messages received on
  different days. Such as:
  #+begin_example
    MSG1                              <--- msg sent on 27dec
    -------(28 December 2020)------   <--- date break
    MSG2                              <--- msg sent on 28dec
  #+end_example

  Default value: ~all~
- User Option: ~telega-root-view-topics~ 

  Alist of topics for "topics" root view.
  Car is name of the topic, cdr is chat filter to match chats. 

  Default value: ~(("Important" . important))~

* Chat Folders
:PROPERTIES:
:CUSTOM_ID: chat-folders
:END:

[[https://telegram.org/blog/folders][Telegram has added]] a new
feature that allows users to organise chats into Chat Folders.

Each folder can have unlimited number of pinned chats.

Before Telegram had support for Chat Folders, =telega= implemented
custom chat label feature, resembling Chat Folders functionality.
But now custom chat label feature is deprecated in favor to Chat
Folders.  Use @@html:<kbd>@@M-x telega-folders-migrate-custom-labels RET@@html:</kbd>@@ to migrate your custom labels into Chat Folders.

@@html:<kbd>@@F@@html:</kbd>@@ prefix in rootbuf is used to operate on Chat Folders:
- @@html:<kbd>@@F +@@html:</kbd>@@ (~telega-folder-create~) :: 
     Create new Telegram folder with name ~FOLDER-NAME~.

- @@html:<kbd>@@F -@@html:</kbd>@@ (~telega-folder-delete~) :: 
     Delete Telegram folder with ~FOLDER-NAME~.
     This won't delete any chat, just a folder.

- @@html:<kbd>@@F =@@html:</kbd>@@ (~telega-folders-reorder~) :: 
     Reorder Telegram folders to be in ~ORDERED-FOLDER-NAMES~ order.

- @@html:<kbd>@@F R@@html:</kbd>@@ (~telega-folder-rename~) :: 
     Assign new name and icon to the folder with ~FOLDER-NAME~.

- @@html:<kbd>@@F I@@html:</kbd>@@ (~telega-folder-set-icon~) :: 
     For folder with ~FOLDER-NAME~ set new icon to ~NEW-ICON-NAME~.

- @@html:<kbd>@@F a@@html:</kbd>@@ (~telega-chat-add-to-folder~) :: 
     Add ~CHAT~ to the Telegram folder named ~FOLDER-NAME~.
     You can add chat to multiple folders.

- @@html:<kbd>@@F d@@html:</kbd>@@ (~telega-chat-remove-from-folder~) :: 
     Remove ~CHAT~ from the folder named ~FOLDER-NAME~.

Customizable options for Chat Folders:
- User Option: ~telega-root-view-topics-folders~ 

  Non-nil to add Chat Folders to the list of topics.
  Could be one of ~prepend~, ~append~ or nil. 

  Default value: ~append~

- User Option: ~telega-folder-icons-alist~ 

  Alist of symbols to be used as folder icons instead of ~telega-symbol-folder~.
  See list of all available icon names in ~telega-folder-icon-names~. 

  Default value: 
  #+begin_src emacs-lisp
    (("All" . "💬")
     ("Unread" . "✅")
     ("Unmuted" . "🔔")
     ("Bots" . "🤖️")
     ("Channels" . "📢")
     ("Groups" . "👥")
     ("Private" . "👤")
     ("Setup" . "📋")
     ("Cat" . "🐱")
     ("Crown" . "👑")
     ("Favorite" . "⭐️")
     ("Flower" . "🌹")
     ("Game" . "🎮")
     ("Home" . "🏠")
     ("Love" . "❤️")
     ("Mask" . "🎭")
     ("Party" . "🍸")
     ("Sport" . "⚽️")
     ("Study" . "🎓")
     ("Trade" . "📊")
     ("Travel" . "🛫️")
     ("Work" . "💼")
     ("Airplane" . "✈️️")
     ("Book" . "📖")
     ("Like" . "👍")
     ("Money" . "💰")
     ("Note" . "🗒️"))
  #+end_src


- User Option: ~telega-chat-folder-format~ 

  Non-nil to prefix chat's title with chat folder.
  %I - Replaced with folder's icon from ~telega-folder-icon-names~ or
       empty string if there is no icon.
  %i - Replaced with folder's icon from ~telega-folder-format~ or
       ~telega-symbol-folder~ if there is no icon.
  %f - Replaced with folder's title.
  %F - Replaced with folder's icon from ~telega-folder-icon-names~
       if icon is unique, or equivalent to %I%f. 

  Default value: 
  #+begin_src emacs-lisp
    #("%F | " 0 5
      (face bold))
  #+end_src


- User Option: ~telega-chat-folders-exclude~ 

  Exclude these folders when determining chat's folder.
  When determining which chat folder to use in
  ~telega-chat-folders-format~, these folders are excluded, if
  single folder is left, then it is used in the formatting. 

  Default value: ~("Unread" "Personal")~

- User Option: ~telega-filter-custom-show-folders~ 

  Non-nil to show telegram folders along the side with custom filters. 

  Default value: ~t~

* Filtering chats
:PROPERTIES:
:CUSTOM_ID: filtering-chats
:END:

Chat Filters are used to match chats, same as regexps are used to
match strings.  Chat Filters uses S-exp notation similar to ~rx~
package for regexps.  Consider Chat Filters as extremely powerful
"Folders" functionality in official client.

Primitive Chat Filter is a specifier to match some property of the
chat.  Each primitive Chat Filter has name (elisp symbol) and
corresponding function named ~telega--filter-<FILTER-NAME>~.
You can specify primitive Chat Filter in either way:
1. ~<FILTER-NAME>~
2. ~( <FILTER-NAME> <ARG1> [<ARG2> ...] )~

Primitive Chat Filters are combined using ~and~, ~or~ and ~not~
filters, forming final Chat Filter.  So Chat Filter is a logical
combination of other Chat Filters, down to primitive Chat Filters.

Chat Filter examples:
- ~(return t)~ :: 
     Matches all chats

- ~(or saved-messages (type channel bot))~ :: 
     Matches bots/channels chats or "Saved Messages" chat

- ~(and unmuted (unread 10) (mention 1))~ :: 
     Matches unmuted chats with at least 10 unread messages and at
     least one message with unread mention

Matching is done using ~telega-chat-match-p~ function.

@@html:<kbd>@@/@@html:</kbd>@@ prefix in rootbuf is used for some useful filtering
commands:

- @@html:<kbd>@@/ i@@html:</kbd>@@ (~telega-filter-by-important~) :: 
     Filter important chats.
- @@html:<kbd>@@/ o@@html:</kbd>@@ (~telega-filter-by-online-status~) :: 
     Filter private chats by its user online ~STATUS~.
- @@html:<kbd>@@/ a@@html:</kbd>@@ (~telega-filter-by-filter~) :: 
     Interactively select a Chat filter to add to active filter.
- @@html:<kbd>@@/ e@@html:</kbd>@@, @@html:<kbd>@@/ :@@html:</kbd>@@ (~telega-filters-edit~) :: 
     Edit and reapply filters list.
- @@html:<kbd>@@/ DEL@@html:</kbd>@@, @@html:<kbd>@@/ d@@html:</kbd>@@ (~telega-filters-pop-last~) :: 
     Pop last ~N~ filters.
- @@html:<kbd>@@/ !@@html:</kbd>@@ (~telega-filters-negate~) :: 
     Negate last filter.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is specified, then negate whole active filter.
- @@html:<kbd>@@/ /@@html:</kbd>@@ (~telega-filters-reset~) :: 
     Reset active filter to the ~telega-filter-default~.

For other chat filtering bindings see [[#list-of-chat-temexes][List of Chat Temexes]]

* Sorting chats
:PROPERTIES:
:CUSTOM_ID: sorting-chats
:END:

It is possible to sort chats in rootbuf out of Telega built-in
order.  Sorting chats is done by some criteria.  Built-in criterias
are in ~telega-sort-criteria-alist~.  Do not insert criterias
directly into ~telega-sort-criteria-alist~, use
~define-telega-sorter~ instead.

@@html:<kbd>@@\@@html:</kbd>@@ prefix in rootbuf is used for sorting commands:

- @@html:<kbd>@@\ \@@html:</kbd>@@ (~telega-sort-reset~) :: 
     Reset active sorter.

     It is possible to add multiple criteria using ~telega-sort-reset~
     with prefix argument @@html:<kbd>@@C-u@@html:</kbd>@@.

- @@html:<kbd>@@\ s@@html:</kbd>@@, @@html:<kbd>@@\ a@@html:</kbd>@@ (~telega-sort-by-sorter~) :: 
     Interactively add ~CRITERIA~ to active sorter.
     If prefix ~ARG~ is used, then add sort criteria, instead of
     overwriting currently active one.

     Use this command to reset active sorter.

For other sorting keybindings see below.

** Sorting criteria
:PROPERTIES:
:CUSTOM_ID: sorting-criteria
:END:

- ~unread-count~, @@html:<kbd>@@\ u@@html:</kbd>@@ (~telega-sort-by-unread-count~) :: 
     Sort chats by number of unread messages in chat.

- ~title~, @@html:<kbd>@@\ t@@html:</kbd>@@ (~telega-sort-by-title~) :: 
     Sort chats alphabetically by chat title.

     Thanks to https://t.me/Kurvivor

- ~member-count~, @@html:<kbd>@@\ m@@html:</kbd>@@ (~telega-sort-by-member-count~) :: 
     Sort chats by number of members in the chat.

- ~online-members~, @@html:<kbd>@@\ o@@html:</kbd>@@ (~telega-sort-by-online-members~) :: 
     Sort chats by number of online members.

- ~join-date~, @@html:<kbd>@@\ j@@html:</kbd>@@ (~telega-sort-by-join-date~) :: 
     Sort chats by join date.  Last joined chats goes first.

- ~chatbuf-recency~, @@html:<kbd>@@\ v@@html:</kbd>@@ (~telega-sort-by-chatbuf-recency~) :: 
     Sort chats by chatbuf recency.  Recently used chats goes first.

- ~chatbuf-visibility~ :: 
     Sort chats by visibility in other window in DWIM style.
     See https://github.com/zevlg/telega.el/issues/165

- ~nearby-distance~ :: 
     Sort chats by nearby distance to me.
     See https://github.com/zevlg/telega.el/issues/165

- ~chats-in-common~ :: 
     Sort by number of chats in common.
     See https://github.com/zevlg/telega.el/issues/218

- ~last-seen~ :: 
     Sort by last seen activity.
     For private chats user's last seen date is taken.
     For other chats date of the last message is taken.

** Customizable options making use of sorting criteria
:PROPERTIES:
:CUSTOM_ID: customizable-options-making-use-of-sorting-criteria
:END:

- User Option: ~telega-chat-completing-sort-criteria~ 

  Criteria to sort chats in ~telega-completing-read-chat~. 

  Default value: ~(chatbuf-visibility chatbuf-recency)~
- User Option: ~telega-chat-switch-buffer-sort-criteria~ 

  Criteria to sort open chats when switching with ~telega-switch-buffer~. 

  Default value: ~chatbuf-recency~

* Chat buffer
:PROPERTIES:
:CUSTOM_ID: chat-buffer
:END:

Chatbuf is a Emacs buffer showing some Telegram chat.  Chatbuf
consists of a list of chat messages and an input for your messages
to send.  Press
@@html:<kbd>@@i@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <describe>@@html:</kbd>@@ (~telega-describe-message~) to
get detailed description of the message at point.

Important customizable options:
- User Option: ~telega-chat-fill-column~ 

  Column to fill chat messages to. 

  Default value: ~70~
- User Option: ~telega-chat-use-date-breaks-for~ 

  Chat Filter for chats where to insert date breaks.
  Date break is a special mark separating two messages received on
  different days. Such as:
  #+begin_example
    MSG1                              <--- msg sent on 27dec
    -------(28 December 2020)------   <--- date break
    MSG2                              <--- msg sent on 28dec
  #+end_example

  Default value: ~all~

** Chatbuf fast navigation
:PROPERTIES:
:CUSTOM_ID: chatbuf-fast-navigation
:END:

@@html:<kbd>@@M-g@@html:</kbd>@@ prefix in chatbuf is used to jump across various chat
messages:
- @@html:<kbd>@@M-g !@@html:</kbd>@@ (~telega-chatbuf-next-unread-reaction~) :: 
     Goto next unread reaction in chat buffer.

- @@html:<kbd>@@M-g d@@html:</kbd>@@ (~telega-chatbuf-goto-date~) :: 
     Goto last message before ~DATE~ timestamp.

- @@html:<kbd>@@M-g <@@html:</kbd>@@ (~telega-chatbuf-history-beginning~) :: 
     Jump to the first message in the chat history.

- @@html:<kbd>@@M-g r@@html:</kbd>@@, @@html:<kbd>@@M-g >@@html:</kbd>@@ (~telega-chatbuf-read-all~) :: 
     Jump to the last message in the chat history and mark all messages as read.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is used, then reset active messages filter.

- @@html:<kbd>@@M-g @@@html:</kbd>@@, @@html:<kbd>@@M-g m@@html:</kbd>@@ (~telega-chatbuf-next-unread-mention~) :: 
     Goto next unread mention in chat buffer.
     If there is no unread mentions, then search for last mention starting
     from message at point.

- @@html:<kbd>@@M-g u@@html:</kbd>@@ (~telega-chatbuf-next-unread~) :: 
     Goto next uneard message in chat.
     ~BUTTON-CALLBACK~ - callback to call with single argument - message
     button.

- @@html:<kbd>@@M-g ^@@html:</kbd>@@, @@html:<kbd>@@M-g P@@html:</kbd>@@ (~telega-chatbuf-goto-pinned-message~) :: 
     Goto next pinned message for the chatbuffer.

- @@html:<kbd>@@M-g x@@html:</kbd>@@ (~telega-chatbuf-goto-pop-message~) :: 
     Pop message from ~telega-chatbuf--messages-pop-ring~ and goto it.

- @@html:<kbd>@@M-g *@@html:</kbd>@@ (~telega-chatbuf-next-favorite~) :: 
     Goto next favorite message.
     See [[#favorite-messages][Favorite Messages]] for details.

- @@html:<kbd>@@M-g v@@html:</kbd>@@ (~telega-chatbuf-goto-video-chat~) :: 
     Goto video chat associated with the chat.
     See [[#video-chats][Video Chats]] for details.

- @@html:<kbd>@@M-g s@@html:</kbd>@@ (~telega-chatbuf-inplace-search~) :: 
     Search backward in the chatbuf.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then search forward instead.

- @@html:<kbd>@@M-g n@@html:</kbd>@@ (~telega-chatbuf-inplace-search-next~) :: 
     Continue inplace searching with last search.

- @@html:<kbd>@@M-g p@@html:</kbd>@@ (~telega-chatbuf-inplace-search-prev~) :: 
     Continue searching.

** Sending ordinary messages
:PROPERTIES:
:CUSTOM_ID: sending-ordinary-messages
:END:

Type a text in the chatbuf input and press @@html:<kbd>@@RET@@html:</kbd>@@ to send the
message.  To insert newline in the middle of the input use ordinary
@@html:<kbd>@@C-j@@html:</kbd>@@ Emacs command.

You can apply markup to the input when sending message.  This is
controlled by number of @@html:<kbd>@@C-u@@html:</kbd>@@ pressed before @@html:<kbd>@@RET@@html:</kbd>@@
and value of the:
- User Option: ~telega-chat-input-markups~ 

  Markups to apply when sending input with @@html:<kbd>@@RET@@html:</kbd>@@.
  Each index in the list corresponds to the number of
  @@html:<kbd>@@C-u@@html:</kbd>@@ supplied before ~RET~, i.e. first element is
  used for ordinary ~RET~, second is used for ~C-u RET~, and third is for
  ~C-u C-u RET~ and so on.  Supported markups are defined in the
  ~telega-chat-markup-functions~.

  "markdown1" syntax is not recommended, it always treats underscore
  as starting point of italic emphasize even inside URLs, thats why
  "markdown1" is not included into ~telega-chat-input-markups~ by
  default. 

  Default value: ~(nil "markdown2" "org")~

Markup syntax table:
|                            | markdown2                        | org                                | markdown1                        |
|----------------------------+----------------------------------+------------------------------------+----------------------------------|
| *bold text*                | ~**bold text**~                  | ~*bold text*~                      | ~*bold text*~                    |
| /italic text/              | ~__italic text__~                | ~/italic text/~                    | ~_italic text_~                  |
| _underline text_           | ~__underline text__~             | ~_underline text_~                 | **UNSUPPORTED**                  |
| +strike through+           | ~~strike through~~               | ~+strike through+~                 | **UNSUPPORTED**                  |
|                            | ~¦¦spoiler¦¦~                    | ~¦¦spoiler¦¦~                      | **UNSUPPORTED**                  |
| ~inlined code~             | ~`inlined code`~                 | ~~inlined code~~                   | ~`inlined code`~                 |
| =pre text=                 | ~```pre text```~                 | ~=pre text=~                       | **UNSUPPORTED**                  |
| [[http://www.url][text]]   | ~[text](http://www.url)~         | ~[[text][http://www.url]]~         | ~[text](http://www.url)~         |
| [[http://t.me/user][name]] | ~[name](tg://user?id=<USER-ID>)~ | ~[[name][tg://user?id=<USER-ID>]]~ | ~[name](tg://user?id=<USER-ID>)~ |

There is also "markdown1" syntax to insert multiline code blocks of
specified languge:
#+begin_example
  ```<language-name>
  first line of multiline preformatted code
  second line
  last line```
#+end_example

"markdown2" backquotes syntax to insert multiline code blocks is
controlled by:
- User Option: ~telega-markdown2-backquotes-as-precode~ 

  Non-nil for markdown1 style syntax for ```.
  Non-nil activates syntax:
    ```<language-name> (not displayed)
    code code
    ``` 

  Default value: ~known~

Org syntax for code blocks is **NOT YET** supported:
#+begin_example
  ,#+begin_src <language-name>
  code line
  next code line
  ...
  ,#+end_src
#+end_example

Also, you can intermix various markups, using @@html:<kbd>@@C-c C-a markup RET@@html:</kbd>@@ command.

Important customizable options:
- User Option: ~telega-chat-input-markups~ 

  Markups to apply when sending input with @@html:<kbd>@@RET@@html:</kbd>@@. 

  Default value: ~(nil "markdown2" "org")~
- User Option: ~telega-chat-ret-always-sends-message~ 

  Non-nil to make @@html:<kbd>@@RET@@html:</kbd>@@ always send a message.
  Otherwise
  @@html:<kbd>@@RET@@html:</kbd>@@
  sends a message only if point is at the end of the chatbuf input or
  inserts newline otherwise. 

  Default value: ~t~
- User Option: ~telega-chat-markup-functions~ 

  List of markups to use on ~C-c C-a markup RET~. 

  Default value: 
  #+begin_src emacs-lisp
    (("markdown2" . telega-markup-markdown2-fmt)
     ("org" . telega-markup-org-fmt)
     ("html" . telega-markup-html-fmt)
     ("markdown1" . telega-markup-markdown1-fmt))
  #+end_src


** Attaching media
:PROPERTIES:
:CUSTOM_ID: attaching-media
:END:

You can attach various media into chatbuf input, using next bindings:
- @@html:<kbd>@@C-c C-a@@html:</kbd>@@ (~telega-chatbuf-attach~) :: 
     Attach something to the chatbuf input.
     @@html:<kbd>@@C-u@@html:</kbd>@@ is passed directly to the attachment function.
     See ~telega-chat-attach-commands~ for available attachment types.

- @@html:<kbd>@@C-c C-f@@html:</kbd>@@ (~telega-chatbuf-attach-media~) :: 
     Attach ~FILENAME~ as media, detecting media type by ~FILENAME~ extension.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach as file.
     If ~AS-FILE-P~ is ~preview~, then attach as file with preview.  ~FILENAME~
     must be a photo in this case.

- @@html:<kbd>@@C-c C-v@@html:</kbd>@@ (~telega-chatbuf-attach-clipboard~) :: 
     Attach clipboard image to the chatbuf as photo.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach clipboard as document.

Text following attached media will be a media caption.

Attachment types to attach with
@@html:<kbd>@@C-c C-a@@html:</kbd>@@ (~telega-chatbuf-attach~) defined in
~telega-chat-attach-commands~ user option:
- photo :: Attach ~FILENAME~ as photo to the chatbuf input.
- self-destruct-photo :: Attach a file as self destructing photo.
     This attachment can be used only in private chats.
- video :: Attach ~FILENAME~ as video to the chatbuf input.
- self-destruct-video :: Attach a file as self destructing video.
     This attachment can be used only in private chats.
- video-note :: Attach a (circled) video note to the chatbuf input.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach existing file as
     video-note.  Otherwise record video note inplace.
     ~telega-vvnote-video-record-args~ is used as arguments to ffmpeg to
     record video notes.
- audio :: Attach ~FILENAME~ as audio to the chatbuf input.
- voice-note :: Attach a voice note to the chatbuf input.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach existing file as
     voice-note.  Otherwise record voice note inplace.
     ~telega-vvnote-voice-cmd~ is used to record voice notes.
- file :: Attach ~FILENAME~ as document to the chatbuf input.
     If ~CONTENT-TYPE-DETECT-P~ is specified, then FILENAME's content type is
     automatically detected.
- gif :: Attach ~GIF-FILE~ as animation to the chatbuf input.
- location :: Attach location to the chatbuf input.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach live location.
- poll :: Attach poll to the chatbuf input.
     Can be used only in group chats.
     ~QUESTION~ - Title of the poll.
     ~ANONYMOUS-P~ - Non-nil to create anonymous poll.
     ~ALLOW-MULTIPLE-ANSWERS-P~ - Non-nil to allow multiple answers.
     ~OPTIONS~ - List of strings representing poll options.
- contact :: Attach ~CONTACT~ user to the chatbuf input.
- sticker :: Attach a sticker.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach recent or
     favorite sticker.  Otherwise choose a sticker from installed
     sticker sets.
- animation :: Attach an animation.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach animation from
     a file, otherwise choose animation from list of saved animations.
- animated-emoji :: Attach an animated ~EMOJI~ to the chatbuf input.
- dice :: Attach random dice roll message.
- screenshot :: Attach screenshot to the chatbuf input.
     If numeric prefix arg ~N~ is given, then take screenshot in ~N~ seconds.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then take screenshot of the screen area.
     Multiple @@html:<kbd>@@C-u@@html:</kbd>@@ increases delay before taking
     screenshot of the area.
     Uses ~telega-screenshot-function~ to take a screenshot.
- clipboard :: Attach clipboard image to the chatbuf as photo.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, then attach clipboard as document.
- markup :: Attach ~MARKUP-TEXT~ using ~MARKUP-NAME~ into chatbuf.
     Using this type of attachment it is possible to intermix multiple
     markups in the chatbuf input.
     Markups are defined in the ~telega-chat-markup-functions~ user option.
- theme :: Interactively attach new chat theme to the chat buffer.
- scheduled :: Mark content as scheduled.
     Send following message at ~TIMESTAMP~.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given and chat is private and
     online status of the corresponding user is known, then send
     message when user gets online.
- disable-notification :: Toggle disable-notification chat option for the subsequent chatbuf input.
     Use this attachment to disable/enable notification on the receiver side.
- enable-notification :: Toggle disable-notification chat option for the subsequent chatbuf input.
     Use this attachment to disable/enable notification on the receiver side.
- disable-webpage-preview :: Disable webpage preview for the following text message.
- send-by :: Set sender for the following message.
- custom-emoji :: Interactively attach a custom emoji.
- code :: Interactively attach a code of the ~LANGUAGE~ into chatbuf input.
     For non-interactive code attach, use ~telega-mnz--chatbuf-attach-internal~.

Special attachment types are =disable-webpage-preview=, =scheduled=,
=disable-notification= or =enable-notification=.  They do not attach
anything, but changes options on how to send the message.  Use
=scheduled= to [[#scheduling-messages-and-reminders][schedule messages]], =disable-notification= or
=enable-notification= to trigger notification on receiver side and
=disable-webpage-preview= to disable rich web page previews for URLs
in the message text.

Customizable options for attaching media:
- User Option: ~telega-chat-upload-attaches-ahead~ 

  Non-nil to upload attachments ahead, before message actually sent.
  Having this non-nil "speedups" uploading, it is like files uploads instantly. 

  Default value: ~t~
- User Option: ~telega-chat-markup-functions~ 

  List of markups to use on ~C-c C-a markup RET~. 

  Default value: 
  #+begin_src emacs-lisp
    (("markdown2" . telega-markup-markdown2-fmt)
     ("org" . telega-markup-org-fmt)
     ("html" . telega-markup-html-fmt)
     ("markdown1" . telega-markup-markdown1-fmt))
  #+end_src


** Replying and editing messages
:PROPERTIES:
:CUSTOM_ID: replying-and-editing-messages
:END:

To reply/edit the message, put point on the message you want to
reply/edit and press
@@html:<kbd>@@r@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <reply>@@html:</kbd>@@ (~telega-msg-reply~) to reply or
@@html:<kbd>@@e@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <edit>@@html:</kbd>@@ (~telega-msg-edit~) to edit.

Aux prompt will be show just above the chatbuf prompt, such as:
#+begin_example
  [✕]| Reply: @demash> Trying to install telega  M-x packag…
  (T)>>>
#+end_example

To cancel aux prompt press on the cross button, or use
@@html:<kbd>@@C-c C-k@@html:</kbd>@@, @@html:<kbd>@@C-M-c@@html:</kbd>@@, @@html:<kbd>@@M-ESC@@html:</kbd>@@ (~telega-chatbuf-cancel-aux~)
binding.
@@html:<kbd>@@C-c C-k@@html:</kbd>@@, @@html:<kbd>@@C-M-c@@html:</kbd>@@, @@html:<kbd>@@M-ESC@@html:</kbd>@@ (~telega-chatbuf-cancel-aux~) accepts
@@html:<kbd>@@C-u@@html:</kbd>@@ prefix, if used then chatbuf's input is also canceled.

To edit your previously sent message press
@@html:<kbd>@@M-p@@html:</kbd>@@ (~telega-chatbuf-edit-prev~).

It is possible to edit a message using markup syntax.
@@html:<kbd>@@e@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <edit>@@html:</kbd>@@ (~telega-msg-edit~) accepts
@@html:<kbd>@@C-u@@html:</kbd>@@ prefix to specify markup syntax to be used for editing.

** Forwarding messages
:PROPERTIES:
:CUSTOM_ID: forwarding-messages
:END:

To forward a message, put cursor under the message which you want to
forward and press
@@html:<kbd>@@f@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <forward>@@html:</kbd>@@ (~telega-msg-forward-marked-or-at-point~)
and then select a Chat to forward a message to.  To forward multiple
messages at once, mark messages with the
@@html:<kbd>@@m@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <unmark>@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <mark>@@html:</kbd>@@ (~telega-msg-mark-toggle~) and then
press
@@html:<kbd>@@f@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <forward>@@html:</kbd>@@ (~telega-msg-forward-marked-or-at-point~)
on one of the messages.

There are few options how you can affect the way a message is forwarded:
1. @@html:<kbd>@@C-u f@@html:</kbd>@@ to forward a message copy, it will look like *you*
   sent a message.
2. @@html:<kbd>@@C-u C-u f@@html:</kbd>@@ To forward a message copy deleting or
   replacing caption it has.  Use this to forward media message with
   your own caption.

** Deleting messages
:PROPERTIES:
:CUSTOM_ID: deleting-messages
:END:

To delete a message, put cursor under the message you want to delete and press
@@html:<kbd>@@DEL@@html:</kbd>@@, @@html:<kbd>@@d@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <delete>@@html:</kbd>@@ (~telega-msg-delete-marked-or-at-point~).

As with [[#forwarding-messages][forwarding messages]], you can mark multiple messages to delete
with @@html:<kbd>@@m@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <unmark>@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <mark>@@html:</kbd>@@ (~telega-msg-mark-toggle~).

Also, you can ban/report message sender (and delete all messages from
this sender in the chat) with
@@html:<kbd>@@B@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <ban-sender>@@html:</kbd>@@ (~telega-msg-ban-sender~) when
cursor is under the message.

=telega= can keep deleted messages visible until chatbuf is
killed. This is controlled using custom variable:

- User Option: ~telega-chat-show-deleted-messages-for~ 

  Chat Filter for chats where to show deleted messages in chatbuf. 

  Default value: ~nil~

For example, to show deleted messages in all chats except for "Saved
Messages", use next:
#+begin_src emacs-lisp
  (setq telega-chat-show-deleted-messages-for '(not saved-messages))
#+end_src

** Scheduling messages and reminders
:PROPERTIES:
:CUSTOM_ID: scheduling-messages-and-reminders
:END:

To schedule a message, press @@html:<kbd>@@C-c C-a scheduled RET@@html:</kbd>@@,
select date and time to schedule message at, type text of a message
and send it as always.

To reschedule a message, first list all scheduled messages in the chat
with @@html:<kbd>@@C-c / scheduled RET@@html:</kbd>@@, then press
@@html:<kbd>@@e@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <edit>@@html:</kbd>@@ (~telega-msg-edit~) on the message
you want to reschedule, remove previous "Schedule" attachment and add
a new one at the beginning.

Message scheduled in "Saved Messages" chat is called reminder.

Whenever a scheduled message or reminder is sent, you get a special
notification marked with a 📅, so you don't get caught off-guard by
messages you planned in the past.

** Navigating previous input
:PROPERTIES:
:CUSTOM_ID: navigating-previous-input
:END:

You can navigate your previous chatbuf input using commands:
- @@html:<kbd>@@M-p@@html:</kbd>@@ (~telega-chatbuf-edit-prev~) :: 
     Edit previously sent message.
     ~MARKUP-ARG~ could be used to select markup to edit message.
     See ~telega-msg-edit~ for details.
- @@html:<kbd>@@M-n@@html:</kbd>@@ (~telega-chatbuf-edit-next~) :: 
     Edit message sent next to currently editing.
     ~MARKUP-ARG~ could be used to select markup to edit message.
     See ~telega-msg-edit~ for details.
- @@html:<kbd>@@M-r@@html:</kbd>@@ (~telega-chatbuf-input-search~) :: 
     Search for REGEX in chat input history.

     While searching input, you can use
     @@html:<kbd>@@M-p@@html:</kbd>@@ (~telega-chatbuf--input-search-input-prev~)
     and
     @@html:<kbd>@@M-n@@html:</kbd>@@ (~telega-chatbuf--input-search-input-next~)
     to cycle chatbuf input ring.

** Completing input in chatbuf
:PROPERTIES:
:CUSTOM_ID: completing-input-in-chatbuf
:END:

Powerful =company-mode= can be used to complete input in the chatbuf
with
@@html:<kbd>@@TAB@@html:</kbd>@@ (~telega-chatbuf-complete-or-next-link~).

=telega= provides few company backends, such as:


- telega-company-emoji :: Complete emojis via ~:<emoji>:~
     syntax. Completion is done using predefined set of emojis.

     Customizable Options:
  - User Option: ~telega-emoji-fuzzy-match~ 

    Non-nil to use fuzzy prefix matching.
    For example without fuzzy matches, prefix ~:jo~ will match only
    ~:joy:~, ~:joy-cat:~ and ~:joystick:~.  With fuzzy matching
    enabled it will match also ~:flag-jo:~ and ~:black-jocker:~. 

    Default value: ~t~


- telega-company-telegram-emoji :: Same as ~telega-company-emoji~,
     but uses Telegram cloud for the emojis completion.


- telega-company-username :: Complete user mentions via ~@<username>~
     syntax. Here is the screenshot, showing use of this backend:
     [[file:https://zevlg.github.io/telega/completing-usernames.jpg]]

Customizable options:
- User Option: ~telega-company-username-show-avatars~ 

  Non-nil to show avatars in the company annotation. 

  Default value: ~nil~
- User Option: ~telega-company-username-markup~ 

  Markup to use for usernames completion. 

  Default value: ~nil~


- telega-company-hashtag :: Complete common hashtags via
     ~#<hashtag>~ syntax.


- telega-company-botcmd :: Complete bot commands via ~/<botcmd>~
     syntax.  This backend does not complete if ~/<botcmd>~ syntax is
     used in the middle of the chatbuf input, only if ~/<botcmd>~
     starts chatbuf input.


- telega-company-markdown-precode :: Complete language name for
     code blocks via ~```~ syntax.

=company-mode= setup might look like:
#+begin_src elisp
  (setq telega-emoji-company-backend 'telega-company-emoji)

  (defun my-telega-chat-mode ()
    (set (make-local-variable 'company-backends)
         (append (list telega-emoji-company-backend
  		     'telega-company-username
  		     'telega-company-hashtag
  		     'telega-company-markdown-precode)
  	       (when (telega-chat-bot-p telega-chatbuf--chat)
  		 '(telega-company-botcmd))))
    (company-mode 1))

  (add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

Consider also using =company-posframe= Emacs package (in MELPA), so
chatbuf's contents remain untouched when completion menu pops above
the chatbuf prompt.

If you don't like =company-posframe=, consider option:
- User Option: ~telega-company-tooltip-always-below~ 

  Non-nil to show company tooltip always below the point.
  Done by recentering point in the chatbuf. 

  Default value: ~t~

*** Using capf for input completions
:PROPERTIES:
:CUSTOM_ID: using-capf-for-input-completions
:END:

It is possible to use standard Emacs ~capf~ (completion at point)
functionality to perform completions in the chatbuf.  You still need
~company.el~ package installed **and loaded** because =telega= uses it
as engine.

~capf~ is used by default if ~company-mode~ is disabled in the
chatbuf, so to enable ~capf~ completions setup could look like:

#+begin_src elisp
  (defun my-telega-chat-mode ()
    (require 'company)
    (add-hook 'completion-at-point-functions
  	    #'telega-chatbuf-complete-at-point nil 'local)
    )

  (add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

~capf~ functionality is very limited comparing to ~company-mode~
completions, however, some users might still prefer ~capf~.

** Sending messages via bots
:PROPERTIES:
:CUSTOM_ID: sending-messages-via-bots
:END:

If chatbuf input starts with =@<botname> <query>= and mentioned bot
support [[https://telegram.org/blog/inline-bots][inline mode]], then pressing
@@html:<kbd>@@TAB@@html:</kbd>@@ (~telega-chatbuf-complete-or-next-link~)
will pop a special buffer with the inline results to the bot inline
~<query>~, you can use these results to send a message via bot.  Some
useful bots with [[https://telegram.org/blog/inline-bots][inline mode]] support are:

- [[https://t.me/gif][@gif]] To search and send animations
- [[https://t.me/pic][@pic]], [[https://t.me/bing][@bing]] To search and send pictures
- [[https://t.me/vid][@vid]] To search and send videos on YouTube
- [[https://t.me/foursquare][@foursquare]] - To find and send places around the world
- etc

To find out is some bot supports [[https://telegram.org/blog/inline-bots][inline mode]] or not, enter
~@<botname><SPC>~ in chatbuf input and press
@@html:<kbd>@@TAB@@html:</kbd>@@ (~telega-chatbuf-complete-or-next-link~).
If momentary help is displayed, then this bot supports inline mode.

Customizable options for inline bots:
- User Option: ~telega-known-inline-bots~ 

  List of known bots for everyday use. 

  Default value: ~("@gif" "@youtube" "@pic")~

- User Option: ~telega-inline-query-window-select~ 

  Non-nil to select window with inline query results. 

  Default value: ~t~

** Filtering chat messages a.k.a. Shared Media
:PROPERTIES:
:CUSTOM_ID: filtering-chat-messages-aka-shared-media
:END:

Message filtering means to show only some messages matching filter.
Available message filters are: =scheduled=, =search=, =by-sender=, =hashtag=, =photo=, =photo-video=, =url=, =doc=, =file=, =gif=, =audio=, =video=, =voice-note=, =video-note=, =voice-video-note=, =chat-photo=, =mention=, =unread-mention=, =unread-reaction=, =failed-to-send=, =pinned=

Chatbuf uses next bindings for message filtering:
- @@html:<kbd>@@C-c /@@html:</kbd>@@ (~telega-chatbuf-filter~) :: 
     Enable chat message filtering ~MSG-FILTER~.

- @@html:<kbd>@@C-c C-c@@html:</kbd>@@ (~telega-chatbuf-filter-cancel~) :: 
     Cancel any message filtering.
     If point is at some message, then keep point on this message after reseting.

- @@html:<kbd>@@C-c C-r@@html:</kbd>@@ (~telega-chatbuf-inplace-search-query~) :: 
     Inplace search backward for the ~QUERY~.
     If @@html:<kbd>@@C-u@@html:</kbd>@@ is given, search for the messages
     containing ~QUERY~ sent by specified sender.

** Opening files using external programs
:PROPERTIES:
:CUSTOM_ID: opening-files-using-external-programs
:END:

Document messages in Telegram has attached file in the message.  By
default =telega= opens that files inside Emacs using ~find-file~ function.  Sometimes that is not
desirable behaviour and you might want to open some files in external
application.  You can use ~org-open-file~ function for this.
Behaviour is controlled by:
- User Option: ~telega-open-file-function~ 

  Function to use to open files associated with messages.
  Called with single argument - filename to open.
  Could be used to open files in external programs.
  Set it to ~org-open-file~ to use Org mode to open files. 

  Default value: ~find-file~

Setup to open some files in external applications might look like:
#+begin_src emacslisp
  ;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
  ;; Use "xdg-open" to open files by default
  (setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)

  (setq telega-open-file-function 'org-open-file)
#+end_src

On MacOS use ~browse-url-default-macosx-browser~ instead of
~browse-url-xdg-open~.

If you also want to open non-document messages as file using
~telega-open-file-function~ consider:
- User Option: ~telega-open-message-as-file~ 

  List of message types to open as file using ~telega-open-file-function~.
  Supported message types are: ~photo~, ~video~, ~audio~,
  ~video-note~, ~voice-note~, ~animation~.
  Document messages are always opens as file. 

  Default value: ~nil~

Another alternative to open some files using external programs is to
use nice =openwith= Emacs package available in MELPA.

*Browse URL with custom function*

Also, you can open urls using custom functions:
- User Option: ~telega-browse-url-alist~ 

  Alist of custom url browse functions.
  Each element is in form: ~(PREDICATE-OR-REGEX . FUNCTION)~. 

  Default value: ~nil~

For example, to play youtube videos using =mpv= player, add this to config:
#+begin_src emacs-lisp
  (defun my-watch-in-mpv (url)
    (async-shell-command (format "mpv -v %S" url)))

  (add-to-list 'telega-browse-url-alist
  	     '("https?://\\(www\\.\\)?youtube.com/watch" . my-watch-in-mpv))
  (add-to-list 'telega-browse-url-alist
  	     '("https?://youtu.be/" . my-watch-in-mpv))
#+end_src

** Client side messages ignoring
:PROPERTIES:
:CUSTOM_ID: client-side-messages-ignoring
:END:

In official telegram clients all messages in group chats are displayed
even if message has been sent by blocked sender (user or chat).
=telega= has client side message ignoring feature implemented.
Ignoring messages can be done by adding function into
~telega-msg-ignore-predicates~.  This function must accept single
argument - message, and return non-nil if messages should be ignored.
You can use ~telega-match-gen-predicate~ to generate message
predicates out of [[#telega-match-expressions][Telega Match Expressions]].
For example, to ignore messages from particular user with ~id=12345~
you could add next code:

#+begin_src emacs-lisp
  (defun my-telega-ignore-12345-user (msg)
    (telega-msg-match-p msg '(sender (ids 12345))))

  (add-hook 'telega-msg-ignore-predicates 'my-telega-ignore-12345-user)
#+end_src

Or to ignore messages from blocked senders (users or chats), just add:

#+begin_src emacs-lisp
  (add-hook 'telega-msg-ignore-predicates
  	  (telega-match-gen-predicate 'msg '(sender blocked)))
#+end_src

To view recently ignored messages use
~M-x telega-ignored-messages RET~ command.

** Favorite messages
:PROPERTIES:
:CUSTOM_ID: favorite-messages
:END:

Any message in any chat can be marked with as /favorite/.  Favorite
messages are labeled with:
- User Option: ~telega-symbol-favorite~ 

  Symbol to use for favorite messages, bookmarks. 

  Default value: ~"🔖"~

To toggle message at point being favorite, press
@@html:<kbd>@@*@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <rm-favorite>@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <add-favorite>@@html:</kbd>@@ (~telega-msg-favorite-toggle~).

To jump to next favorite message in the chat buffer press
@@html:<kbd>@@M-g *@@html:</kbd>@@ (~telega-chatbuf-next-favorite~).

To view all favorite messages in all chats, enable "Favorite Messages"
Root View, by pressing
@@html:<kbd>@@v *@@html:</kbd>@@ (~telega-view-favorite-messages~) in
the [[#root-buffer][root buffer]].

** Media Controls for media messages
:PROPERTIES:
:CUSTOM_ID: media-controls-for-media-messages
:END:

Some media messages that are playing inside Emacs (such as "audio",
"voice-note" or "video-note" messages) will have additional media
control buttons to control media playback parameters:
#+begin_example
  [⏪] [⏩] [2×] [Stop] 
#+end_example

For fast access to media controls you can you next bindings:
- @@html:<kbd>@@0@@html:</kbd>@@ (~telega-msg--vvnote-stop~) :: 
     Stop playing media message.
- @@html:<kbd>@@<@@html:</kbd>@@, @@html:<kbd>@@,@@html:</kbd>@@ (~telega-msg--vvnote-rewind-10-backward~) :: 
     Rewind 10 seconds backward.
- @@html:<kbd>@@>@@html:</kbd>@@, @@html:<kbd>@@.@@html:</kbd>@@ (~telega-msg--vvnote-rewind-10-forward~) :: 
     Rewind 10 seconds forward.
- @@html:<kbd>@@x@@html:</kbd>@@ (~telega-msg--vvnote-play-speed-toggle~) :: 
     Toggle playback speed for the media message.
     Only two modes are available: normal speed and x2 speed.
- @@html:<kbd>@@9@@html:</kbd>@@, @@html:<kbd>@@8@@html:</kbd>@@, @@html:<kbd>@@7@@html:</kbd>@@, @@html:<kbd>@@6@@html:</kbd>@@, @@html:<kbd>@@5@@html:</kbd>@@, @@html:<kbd>@@4@@html:</kbd>@@, @@html:<kbd>@@3@@html:</kbd>@@, @@html:<kbd>@@2@@html:</kbd>@@, @@html:<kbd>@@1@@html:</kbd>@@ (~telega-msg--vvnote-rewind-part~) :: 
     Rewind to the N's 10 part of the message duration.
     I.e. if you press 7, then you will jump to 70% of the message
     duration.

To play/pause media messages use @@html:<kbd>@@RET@@html:</kbd>@@.  Also,
@@html:<kbd>@@l@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <copy-link>@@html:</kbd>@@ (~telega-msg-copy-link~) command
supports linking to the currently playing (or paused at) moment.

To reference a given moment in a media message (or in a reply to media
message) use ~[HH:]MM:SS]~ syntax in the message's body/caption.  Such
timestamp marks will be automatically emphasised with a media
timestamp text entity.

* Video Chats
:PROPERTIES:
:CUSTOM_ID: video-chats
:END:

**TODO**: write me

* Stickers / Animations
:PROPERTIES:
:CUSTOM_ID: stickers--animations
:END:

To display stickers =telega= uses =dwebp= utility to convert ~.webp~
stickers into png images that can be displayed by Emacs. =dwebp=
utility is available on almost every system inside =webp= package.

Important customizable options for stickers:
- User Option: ~telega-sticker-size~ 

  Size for the sticker.
  car is height in chars to use.
  cdr is maximum width in chars to use. 

  Default value: ~(4 . 24)~
- User Option: ~telega-sticker-set-download~ 

  Non-nil to automatically download known sticker sets. 

  Default value: ~nil~
- User Option: ~telega-sticker-favorite-background~ 

  Background color for the favorite stickers.
  Can be nil, in this case favorite stickers are not outlined. 

  Default value: ~"cornflower blue"~

To play short animations inside Emacs =telega= uses =ffmpeg= utility.
Playing animations inside Emacs is a bit heavy process, so be careful
in choosing value for the ~telega-animation-play-inline~.

Important customizable options for animations:
- User Option: ~telega-animation-height~ 

  Height in chars for animations. 

  Default value: ~5~
- User Option: ~telega-animation-play-inline~ 

  Non-nil to play animation inside telega.
  If number, then play animation inline only if animation is shorter
  then this number of seconds. 

  Default value: ~10~
- User Option: ~telega-animation-download-saved~ 

  Non-nil to automatically download saved animations. 

  Default value: ~nil~

** Animated stickers
:PROPERTIES:
:CUSTOM_ID: animated-stickers
:END:

=telega= supports animated stickers using =tgs2png= utility from
https://github.com/zevlg/tgs2png

Once =tgs2png= tool is installed into ~exec-path~ (check value for
~telega-sticker-animated-play~ after =telega= is started), you can
play animated stickers by pressing @@html:<kbd>@@RET@@html:</kbd>@@ on sticker.

Also [[#telega-autoplay-mode][telega-autoplay-mode]] can be used, to automatically animate
messages containing animated stickers.

** Favorite and recently used stickers
:PROPERTIES:
:CUSTOM_ID: favorite-and-recently-used-stickers
:END:

To attach your favorite or rencetly used sticker use @@html:<kbd>@@C-u@@html:</kbd>@@
before @@html:<kbd>@@C-c C-a sticker RET@@html:</kbd>@@.  Background for favorite
stickers are filled with color:
- User Option: ~telega-sticker-favorite-background~ 

  Background color for the favorite stickers.
  Can be nil, in this case favorite stickers are not outlined. 

  Default value: ~"cornflower blue"~

To toggle sticker being favorite, press
@@html:<kbd>@@*@@html:</kbd>@@, @@html:<kbd>@@f@@html:</kbd>@@ (~telega-sticker-toggle-favorite~)
while point is under sticker in the ~*Telega Sticker Set*~ buffer.

Or you can press @@html:<kbd>@@S@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <save>@@html:</kbd>@@ (~telega-msg-save~)
on the sticker message to add that sticker to the favorite stickers
list.

** Animations
:PROPERTIES:
:CUSTOM_ID: animations
:END:

There are multiple methods you can use to attach an animation:
- @@html:<kbd>@@C-c C-a animation RET@@html:</kbd>@@ to attach animation from the Saved
  Animations list.
- @@html:<kbd>@@C-c C-a gif RET@@html:</kbd>@@ to attach animation from a =gif= or =mp4=
  file.
- [[#sending-messages-via-bots][via @gif bot]]

To play animation message press @@html:<kbd>@@RET@@html:</kbd>@@ on the message.  Also,
[[#telega-autoplay-mode][telega-autoplay-mode]] can be used to automatically play animation
messages.

To explicitly add animation to Saved Animations list, press
@@html:<kbd>@@S@@html:</kbd>@@, @@html:<kbd>@@<down-mouse-3> <save>@@html:</kbd>@@ (~telega-msg-save~) on the
corresponding animation message.

* Multiple accounts
:PROPERTIES:
:CUSTOM_ID: multiple-accounts
:END:

=telega= support multiple accounts, however only single account can be
active, i.e. you can't run account simultaneously, but you can switch
between accounts.  Notifications won't work for inactive accounts.

To switch accounts use
@@html:<kbd>@@a@@html:</kbd>@@ (~telega-account-switch~) from [[#telega-prefix-map][prefix
map]].  To setup multiple accounts use:

- User Option: ~telega-accounts~ 

  List of the accounts to be used by telega.
  Each element is a list in form:
  (ACCOUNT-NAME CUSTOM-VAR1 VAL1 CUSTOM-VAR2 VAL2 ...).
  At least ~telega-database-dir~ should be customized for each account. 

  Default value: ~nil~

  For example:
  #+begin_src emacs-lisp
    (setq telega-accounts (list
      (list "zevlg" 'telega-database-dir telega-database-dir)
      (list "Evgen2" 'telega-database-dir
        (expand-file-name "evgen2" telega-database-dir))))
  #+end_src

  Each account can have its own configuration using custom variables
  specified in account setup, and only ~telega-database-dir~ must be
  different for different accounts.

  Uninitialized account from ~telega-accounts~ will be initialized when
  you switch to it for the first time.

* Minor Modes
:PROPERTIES:
:CUSTOM_ID: minor-modes
:END:

=telega= ships with various minor modes you might consider to use.

** Notifications for incoming messages
:PROPERTIES:
:CUSTOM_ID: notifications-for-incoming-messages
:END:

=telega.el= can notify you about incoming messages and calls via
D-Bus notifications, however notifications are disabled by default.

Enable it with ~(telega-notifications-mode 1)~ or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-notifications-mode)
#+end_src

Message is triggered for messages matching:
- User Option: ~telega-notifications-msg-temex~ 

  Message temex to match messages that needs to be notified. 

  Default value: ~(call telega-notifications-msg-notify-p)~

You can use this option for custom notifications.  For example to
trigger notification for messages containing "keyword" (in addition to
default behaviour) you can set ~telega-notifications-msg-temex~ to
~(or (call telega-notifications-msg-notify-p) (contains "keyword"))~

By default notification triggers if
~telega-notifications-msg-notify-p~ predicate returns non-nil.  It
returns non-nil if next conditions are satisfied.

Do *NOT* pop notification if:
1. Me is not member of the group chat, see
   https://github.com/zevlg/telega.el/issues/224
2. Message is ignored by
   [[#client-side-messages-ignoring][client side messages ignoring]]
3. Chat is muted and message does not contain unread mention or
   mention notification is disabled for the chat
4. Message already has been read (see ~telega-msg-seen-p~)
5. Message is older than 1 min (to avoid popping up messages on
   laptop wakeup)
6. Message is currently observable in a chatbuf, i.e. chatbuf
   must be selected and focused in (not having
   ~telega-chatbuf--refresh-point~)

To view recent notifications use
~M-x telega-notifications-history RET~ command.

See also [[#telega-alertel--notifications-using-alertel][Notifications using alert.el]]

** telega-mode-line-mode
:PROPERTIES:
:CUSTOM_ID: telega-mode-line-mode
:END:

Global minor mode to display =telega= status in modeline.

Enable with ~(telega-mode-line-mode 1)~ or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-mode-line-mode)
#+end_src

Customizable options:

- User Option: ~telega-mode-line-string-format~ 

  Format in mode-line-format for ~telega-mode-line-string~. 

  Default value: 
  #+begin_src emacs-lisp
    ("   "
     (:eval
      (telega-mode-line-icon))
     (:eval
      (car
       (telega-account-current)))
     (:eval
      (telega-mode-line-online-status))
     (:eval
      (when telega-use-tracking-for
        (telega-mode-line-tracking)))
     (:eval
      (telega-mode-line-unread-unmuted))
     (:eval
      (telega-mode-line-mentions 'messages))
     (:eval
      (telega-mode-line-active-video-chats)))
  #+end_src


** telega-appindicator-mode
:PROPERTIES:
:CUSTOM_ID: telega-appindicator-mode
:END:

Global minor mode to display =telega= status in system tray.  This
mode requires appindicator support in the =telega-server=.  To add
appindicator support to =telega-server=, please install
=libappindicator3-dev= system package and rebuild =telega-server=
with {{{kbd(M-x telega-server-build RET}}}.

Screenshot of system tray with enabled =telega= appindicator:
[[https://zevlg.github.io/telega/screen-appindicator.png]]

Enable with ~(telega-appindicator-mode 1)~ or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-appindicator-mode)
#+end_src

Customizable options:
- User Option: ~telega-appindicator-use-label~ 

  Non-nil to add text labels to the icon.
  Otherwise use just icon to show info.
  labels are not supported by XEMBED based system trays, such as
  ~exwm-systemtray~ or ~polybar~. 

  Default value: ~nil~
- User Option: ~telega-appindicator-icon-colors~ 

  Colors to use for offline/online appindicator icon.
  Alist with ~offline~, ~online~ or ~connecting~ as key, and value in form
  (CIRCLE-COLOR TRIANGLE-COLOR ONLINE-CIRCLE-COLOR). 

  Default value: 
  #+begin_src emacs-lisp
    ((offline "white" "black" nil)
     (online "#7739aa" "white" "#00ff00")
     (connecting "gray" "white" "white"))
  #+end_src

- User Option: ~telega-appindicator-show-account-name~ 

  Non-nil to show current account name in appindicator label.
  Applied only if ~telega-appindicator-use-label~ is non-nil. 

  Default value: ~t~
- User Option: ~telega-appindicator-show-mentions~ 

  Non-nil to show number of mentions in appindicator label.
  Applied only if ~telega-appindicator-use-label~ is non-nil. 

  Default value: ~t~
- User Option: ~telega-appindicator-labels~ 

  List of number labels to use for the number of unread unmuted chats.
  Use this labels instead of plain number.
  Set to nil to use plain number. 

  Default value: ~("❶" "❷" "❸" "❹" "❺" "❻" "❼" "❽" "❾" "❿" "⓫" "⓬" "⓭" "⓮" "⓯" "⓰" "⓱" "⓲" "⓳" "⓴")~

** telega-autoplay-mode
:PROPERTIES:
:CUSTOM_ID: telega-autoplay-mode
:END:

Global minor mode to automatically open content for incoming
messages.  Message automatically opens if it matches against
~telega-autoplay-msg-temex~ [[#telega-match-expressions][Message
Temex]] and message's content is fully observable.

Enable with ~(telega-autoplay-mode 1)~ or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-autoplay-mode)
#+end_src

Customizable options:
- User Option: ~telega-autoplay-msg-temex~ 

  Message Temex for messages to automatically play content for. 

  Default value: ~(type Animation Sticker AnimatedEmoji)~
- User Option: ~telega-autoplay-custom-emojis~ 

  Non-nil to automatically play this number of custom emojis in the message. 

  Default value: ~10~

** telega-squash-message-mode
:PROPERTIES:
:CUSTOM_ID: telega-squash-message-mode
:END:

Minor mode for chatbuf to squash messages into single one while
nobody saw this.

Squashing mean adding contents of the new message to the previous
message by editing contents of the previous message.

New message in a chat is squashed into your previous message only
if all next conditions are met:

1. Last message in chat is sent by you
2. Nobody seen your last message
3. Last and new message are both text messages
4. Last message can be edited
5. Last and new messages are *not* replying to any message
6. Last message has no associated web-page
7. New message has no ~messageSendOptions~ to avoid squashing
   scheduled messages or similar
8. New message is sent within ~telega-squash-message-within-seconds~
   seconds from last message

** telega-image-mode
:PROPERTIES:
:CUSTOM_ID: telega-image-mode
:END:

Major mode to view images in chatbuf.  Same as ~image-mode~,
however has special bindings:

- @@html:<kbd>@@n@@html:</kbd>@@ (~telega-image-next~) :: 
     Show next image in chat.

- @@html:<kbd>@@p@@html:</kbd>@@ (~telega-image-prev~) :: 
     Show previous image in chat.

To view high resolution image in chatbuf with ~telega-image-mode~
press @@html:<kbd>@@RET@@html:</kbd>@@ on the message with photo.

** telega-edit-file-mode
:PROPERTIES:
:CUSTOM_ID: telega-edit-file-mode
:END:

Minor mode to edit files from Telegram messages.
In this mode @@html:<kbd>@@C-x C-s@@html:</kbd>@@ will save file to Telegram cloud.
To enable ~telega-edit-file-mode~ for files opened from message
with @@html:<kbd>@@RET@@html:</kbd>@@, use:

#+begin_src emacs-lisp
  (add-hook 'telega-open-file-hook 'telega-edit-file-mode)
#+end_src

While editing file press
@@html:<kbd>@@<menu-bar> <goto-message>@@html:</kbd>@@, @@html:<kbd>@@M-g t@@html:</kbd>@@ (~telega-edit-file-goto-message~)
to go back to the file's message.

To switch between files opened from =telega= use
@@html:<kbd>@@e@@html:</kbd>@@ (~telega-edit-file-switch-buffer~)
binding from the [[#telega-prefix-map][Telega prefix map]].

To distinguish files opened from =telega= with ordinary files
suffix is added to the buffer name.  You can modify this suffix
using user option:

- User Option: ~telega-edit-file-buffer-name-function~ 

  Function to return buffer name when ~telega-edit-file-mode~ is enabled.
  Function is called without arguments and should return a buffer name string.
  Inside a function you can use ~telega-edit-file-message<f>~ to
  get message associated with the file. 

  Default value: ~telega-edit-file-buffer-name~

** telega-highlight-text-mode
:PROPERTIES:
:CUSTOM_ID: telega-highlight-text-mode
:END:

=jit-lock= powered minor mode to highlight given regexp.

Similar to =hi-lock=, however supports =jit-lock= for highlighting
dynamic content.

** telega-patrons-mode
:PROPERTIES:
:CUSTOM_ID: telega-patrons-mode
:END:

Emphasize =telega=
[[https://opencollective.com/telega#section-contributors][patrons]]
by drawing special elements (telega cat ears) above the patron's
avatar, like: [[https://zevlg.github.io/telega/telega-patron-ava.png]]

In addition:
- Display "Telega Patron Since: <date>" note in the patron's Chat/User description.
- All [[https://zevlg.github.io/telega.el/#telega-storiesel--display-emacs-stories-in-the-dashboard][Emacs Stories]] from =telega= patrons are automatically considered "Featured".

If you are already =telega= patron and not in the
~telega-patrons-alist~ list, please [[https://t.me/zevlg][write
me]].

~telega-patrons-mode~ is enabled by default.

** telega-my-location-mode
:PROPERTIES:
:CUSTOM_ID: telega-my-location-mode
:END:

~telega-my-location~ is used by =telega= to calculate distance to
me for location messages.  Also, ~telega-my-location~ is used to
search chats nearby me.  So, having it set to correct value is
essential.  There is
[[#telega-live-locationel--manage-live-location-in-telega-using-geoel][contrib/telega-live-location.el]]
which uses =geo.el= to actualize ~telega-my-location~, however it
is not always possible to use it.

When ~telega-my-location-mode~ is enabled, your
~telega-my-location~ gets automatic update when you send location
message into "Saved Messages" using mobile Telegram client.

Enable with ~(telega-my-location-mode 1)~ or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-my-location-mode)
#+end_src

** telega-active-locations-mode
:PROPERTIES:
:CUSTOM_ID: telega-active-locations-mode
:END:

Minor mode to display currently active live locations in the root
buffer.

~telega-active-locations-mode~ is enabled by default.

- User Option: ~telega-active-locations-show-avatars~ 

  Non-nil to show user avatars in chat buffer. 

  Default value: ~nil~
- User Option: ~telega-active-locations-show-titles~ 

  Non-nil to show sender/chat titles along the side with avatars. 

  Default value: ~t~


** telega-active-video-chats-mode
:PROPERTIES:
:CUSTOM_ID: telega-active-video-chats-mode
:END:

Minor mode to display currently active video chats in the root
buffer.  Also display number of active video chats in the modeline
if [[#telega-mode-line-mode][telega-mode-line-mode]] is enabled.

~telega-active-video-chats-mode~ is enabled by default.

Customizable options:
- User Option: ~telega-active-video-chats-temex~ 

  Chat Temex to match chat with active video chat. 

  Default value: 
  #+begin_src emacs-lisp
    (and is-known
         (has-video-chat non-empty))
  #+end_src


** telega-recognize-voice-message-mode
:PROPERTIES:
:CUSTOM_ID: telega-recognize-voice-message-mode
:END:

Minor mode to automatically recognize speech in a voice/video
messages.  Available only for the Telegram Premium users.

Enable with ~(telega-recognize-voice-message-mode 1)~ or at
=telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-recognize-voice-message-mode)
#+end_src

Customizable options:
- User Option: ~telega-recognize-voice-message-temex~ 

  Message Temex for messages to automatically recognize speech.
  Speech recognition is only applied to voice messages matching this
  Message Temex.  Applied only if non-nil.
  For example, to recognize speech in a voice messages only in private
  chats, use ~(chat (type private))~ Message Temex. 

  Default value: ~nil~

** telega-auto-translate-mode
:PROPERTIES:
:CUSTOM_ID: telega-auto-translate-mode
:END:

Minor chatbuf mode to automatically translate messages in the chat
to your native language.  Also translates chatbuf input from your
native language to the chat's language.

Customizable options:
- User Option: ~telega-auto-translate-probe-language-codes~ 

  List of language codes to probe.
  Chat description is used to probe chat's language. 

  Default value: ~nil~
- User Option: ~telega-translate-to-language-by-default~ 

  Default language code for messages translation.
  If nil, then use language suggested by the server. 

  Default value: ~nil~

** telega-root-auto-fill-mode
:PROPERTIES:
:CUSTOM_ID: telega-root-auto-fill-mode
:END:

Global minor mode to automatically adjust ~telega-root-fill-column~
to the width of the window displaying rootbuf.

~telega-root-auto-fill-mode~ is enabled by default.

** telega-voip-sounds-mode
:PROPERTIES:
:CUSTOM_ID: telega-voip-sounds-mode
:END:

Mode to notify about VoIP call by playing sounds.
~telega-voip-sounds-mode~ is enabled by default.  Disable it with:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook (lambda () (telega-voip-sounds-mode -1)))
#+end_src

* Contributed packages
:PROPERTIES:
:CUSTOM_ID: contributed-packages
:END:

=contrib/= directory contains packages contributed to =telega=
project.

** /ol-telega.el/ -- Org mode links to telegram chats and messages
:PROPERTIES:
:CUSTOM_ID: ol-telegael--org-mode-links-to-telegram-chats-and-messages
:END:

Installs "telega" links to Org mode.

"telega" link can point to a chat, a message or content of a
message.

Creating links to a message content is very useful in conjuction
with [[#telega-edit-file-mode][Edit File Mode]], so you can store
your Org mode files in Telegram Cloud and create links to them in
Roam manner.

** /telega-status-history.el/ -- Global minore mode to save user's online status history
:PROPERTIES:
:CUSTOM_ID: telega-status-historyel--global-minore-mode-to-save-users-online-status-history
:END:

Saves online status history into ~telega-status-history-logs-dir~ directory.

** /telega-url-shorten.el/ -- Makes urls look nicer
:PROPERTIES:
:CUSTOM_ID: telega-url-shortenel--makes-urls-look-nicer
:END:

Minor mode for chatbuf to show shorter version for some URLs.  For
example, with ~telega-url-shorten-mode~ enabled in chatbuf, urls
like:

#+begin_example
  https://github.com/zevlg/telega.el/issues/105
  https://gitlab.com/jessieh/mood-line/issues/6
  https://www.youtube.com/watch?v=0m2jR6_eMkU
  https://ru.wikipedia.org/wiki/Душ
#+end_example

Will look like:
[[https://zevlg.github.io/telega/telega-url-shorten.png]]

Can be enabled globally in all chats matching
~telega-url-shorten-mode-for~ [[#telega-match-expressions][chat
temex]] (see below) with ~(global-telega-url-shorten-mode 1)~ or by
adding:

#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'global-telega-url-shorten-mode)
#+end_src

Depends on
[[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
Emacs package.

Customizable options:

- User Option: ~telega-url-shorten-use-images~ 

  Non-nil to use images on graphics display. 

  Default value: ~nil~

- User Option: ~telega-url-shorten-regexps~
  Alist of patterns for URL shortening.

  To change ~:symbol~ or ~:svg-icon~ property for existing url
  shortening pattern use something like:
  #+begin_src
    (plist-put (cdr (assq '<LABEL> telega-url-shorten-regexps))
    	   :<PROP> <VALUE>)
  #+end_src

- User Option: ~telega-url-shorten-mode-for~ 

  Chat filter for ~global-telega-url-shorten-mode~.
  ~global-telega-url-shorten-mode~ enables urls shortening only for
  chats matching this chat filter. 

  Default value: ~all~

** /telega-alert.el/ -- Notifications using =alert.el=
:PROPERTIES:
:CUSTOM_ID: telega-alertel--notifications-using-alertel
:END:

To enable notifications using =alert.el= use:
#+begin_src emacs-lisp
  (telega-alert-mode 1)
#+end_src

Alerts for =telega.el= are fired with ~:mode 'telega-chat-mode~
value.  You might use this to customize alert rules with
~alert-add-rule~.

** /telega-dired-dwim.el/ -- Attach files from dired in DWIM style
:PROPERTIES:
:CUSTOM_ID: telega-dired-dwimel--attach-files-from-dired-in-dwim-style
:END:

This package advises ~dired-do-copy~ to attach files into visible chatbuf.

In dired, mark files you want to attach and press @@html:<kbd>@@C@@html:</kbd>@@.  If
you have some chatbuf visible, marked files will be attached in
that chatbuf.

** /telega-live-location.el/ -- Manage live location in Telega using geo.el
:PROPERTIES:
:CUSTOM_ID: telega-live-locationel--manage-live-location-in-telega-using-geoel
:END:

Enable this mode with @@html:<kbd>@@M-x global-telega-live-location-mode RET@@html:</kbd>@@

This mode installs new ~live-geo-location~ chat attach type, use it
with @@html:<kbd>@@C-c C-a live-geo-location RET@@html:</kbd>@@ in the chatbuf.

This mode requires the =geo.el= library, available at
https://git.sr.ht/~oldosfan/geo-xdg.el

Take into account that using ~geo-simulate~ backend to fake geo
location data is Telegram API ToS violation.  See 1.4 in
https://core.telegram.org/api/terms

** /telega-mnz.el/ -- Display Emacs content inside Telega messages.
:PROPERTIES:
:CUSTOM_ID: telega-mnzel--display-emacs-content-inside-telega-messages
:END:

Global minor mode to highlight code blocks inside messages.

Can be enabled globally in all chats matching
~telega-mnz-mode-for~ (see below) chat filter with
~(global-telega-mnz-mode 1)~ or by adding:

#+begin_src emacs-lisp
  (require 'telega-mnz)
  (add-hook 'telega-load-hook 'global-telega-mnz-mode)
#+end_src

Optionally depends on =language-detection= Emacs package.  If
=language-detection= is available, then laguage could be detected
automatically for code blocks without language explicitly
specified.  Install =language-detection= with @@html:<kbd>@@M-x package-install RET language-detection RET@@html:</kbd>@@

=telega-mnz= installs @@html:<kbd>@@'@@html:</kbd>@@
(~telega-mnz-send-region-as-code~) binding into
[[#telega-prefix-map][telega prefix map]] to attach region as code
to a chatbuf.

Also, =telega-mnz= installs ~code~ [[#attaching-media][media
attachment type]], use it with @@html:<kbd>@@C-c C-a code RET@@html:</kbd>@@ in
chatbuf.


Customizable options:
- User Option: ~telega-mnz-mode-for~ 

  Chat filter for ~global-telega-mnz-mode~.
  Global mnz mode enables ~telega-mnz-mode~ only for chats matching
  this chat filter. 

  Default value: ~all~

- User Option: ~telega-mnz-keep-pre-face~ 

  Non-nil to keep ~telega-entity-type-pre~ face on the highlighted text. 

  Default value: ~t~

- User Option: ~telega-mnz-entity-types~ 

  List of entity types for which mnz performs highlighting. 

  Default value: ~(textEntityTypePre textEntityTypePreCode textEntityTypeCode)~

- User Option: ~telega-mnz-edit-code-block~ 

  How to edit message containing mnz code blocks. 

  Default value: ~query~

- User Option: ~telega-mnz-use-language-detection~ 

  Non-nil to use ~language-detection~ for blocks without specified language.
  Could be also a number, meaning that language detection is done
  only for code larger then this number of chars. 

  Default value: ~50~

- User Option: ~telega-mnz-edit-display-buffer-action~ 

  Action value when poping to code edit buffer.
  See docstring for ~display-buffer~ for the value meaning. 

  Default value: ~((display-buffer-below-selected))~

** /telega-dashboard.el/ -- Important telega chats in the Emacs dashboard
:PROPERTIES:
:CUSTOM_ID: telega-dashboardel--important-telega-chats-in-the-emacs-dashboard
:END:

Display important telega chats in the Emacs dashboard.  Enable it with:

#+begin_src emacs-lisp
  (require 'telega-dashboard)
  (add-to-list 'dashboard-items '(telega-chats . 5))
#+end_src

Screenshot of =telega-dashboard= in action:
[[https://zevlg.github.io/telega/telega-dashboard.png]]

Customizable options:
- User Option: ~telega-dashboard-chat-filter~ 

  Chat Filter used to filter chats to display in the Emacs dashboard. 

  Default value: 
  #+begin_src emacs-lisp
    (or mention
        (and unread unmuted))
  #+end_src

- User Option: ~telega-dashboard-chat-inserter~ 

  Inserter for the chat button in the Emacs dashboard. 

  Default value: ~telega-ins--chat-full~

** /telega-stories.el/ -- Display Emacs Stories in the dashboard
:PROPERTIES:
:CUSTOM_ID: telega-storiesel--display-emacs-stories-in-the-dashboard
:END:

Emacs Stories: share your Emacs experience with other Emacs users.

Display recent [[https://t.me/emacs_stories][Emacs Stories]] in the
dashboard.  Enable it with:

#+begin_src emacs-lisp
  (require 'telega-stories)
  (telega-stories-mode 1)
  ;; "Emacs Stories" rootview
  (define-key telega-root-mode-map (kbd "v e") 'telega-view-emacs-stories)
  ;; Emacs Dashboard
  (add-to-list 'dashboard-items '(telega-stories . 5))
#+end_src

Apart from dashboard, ~telega-stories~ provides "Emacs Stories"
[[https://zevlg.github.io/telega.el/#rootbuf-view-switching][Root
View]].  To enable this view execute @@html:<kbd>@@M-x telega-view-emacs-stories RET@@html:</kbd>@@ in the root buffer.

If you see inappropriate content in some Emacs Story, please report
this story by pressing
@@html:<kbd>@@!@@html:</kbd>@@ (~telega-stories-msg-report~) on
the story.

For best performance consider newest Emacs28 with ~:base_uri~ svg
image property support.

Screenshots of =telega-stories= in action:
[[https://zevlg.github.io/telega/emacs-stories-dashboard.png]]

And screenshot of "Emacs Stories" root view:
[[https://zevlg.github.io/telega/emacs-stories-rootview.png]]

Customizable options:
- User Option: ~telega-stories-show~ 

  Show ~all~ or only ~unread~ stories. 

  Default value: ~unread~
- User Option: ~telega-stories-height~ 

  Height in chars for Emacs Stories buttons 

  Default value: ~6~
- User Option: ~telega-stories-notify-if~ 

  Pop notification on new story if stories chat matches this Chat Filter. 

  Default value: ~(not unmuted)~
- User Option: ~telega-stories-preload-content~ 

  Preload content when Emacs Story is inserted, so can be viewed instantly. 

  Default value: ~t~
- User Option: ~telega-stories-root-view-count~ 

  Number of Emacs Stories to show in "Emacs Stories" rootview. 

  Default value: ~12~
- User Option: ~telega-stories-root-view-keep-viewed~ 

  Keep viewed stories in the "Emacs Stories" rootview.
  Non-nil to keep story in the root view after story is viewed. 

  Default value: ~t~

** /telega-transient.el/ -- Transient (magit-like style) commands for telega
:PROPERTIES:
:CUSTOM_ID: telega-transientel--transient-magit-like-style-commands-for-telega
:END:

Use transient (magit-like style) commands in the telega.  Enable it
with:

#+begin_src emacs-lisp
  (require 'telega-transient)
  (telega-transient-mode 1)
#+end_src

Control keymaps for which to use transient with:
- User Option: ~telega-transient-keymaps~ 

  List of keymaps names to apply transient for. 

  Default value: ~(telega-prefix-map telega-sort-map telega-filter-map telega-describe-map telega-folder-map telega-voip-map telega-root-fastnav-map telega-root-view-map telega-chatbuf-fastnav-map)~

** /telega-adblock.el/ -- Block advertisement messages
:PROPERTIES:
:CUSTOM_ID: telega-adblockel--block-advertisement-messages
:END:

Telegram channels often advertises another channels in annoying
manner.  Sometimes adverts has inappropriate content.  This mode
uses [[#client-side-messages-ignoring][client side messages
ignoring]] functionality to block such advert messages.

To enable advertisement blocking use:
#+begin_src emacs-lisp
  (telega-adblock-mode 1)
#+end_src

Customizable options:
- User Option: ~telega-adblock-for~ 

  Chat Temex to match chats for which to apply adblock logic. 

  Default value: 
  #+begin_src emacs-lisp
    (and
     (type channel)
     (not unmuted)
     (not verified))
  #+end_src

- User Option: ~telega-adblock-chat-order-if-last-message-ignored~ 

  Custom chat order for chats with last message being ignored by adblock.
  Set to "1" to put chats with ignored last message to the bottom of
  the rootbuf. 

  Default value: ~nil~
- User Option: ~telega-adblock-verbose~ 

  Non-nil to show (in echo area) reason why message is ignored by adblock. 

  Default value: ~nil~
- User Option: ~telega-adblock-max-distance~ 

  Maximum string-distance for self-link.
  Used for heuristics to avoid blocking non-advert messages in some channels.
  Set it to less value if you see some advert messages not being blocked. 

  Default value: ~4~
- User Option: ~telega-adblock-forwarded-messages~ 

  Non-nil to block messages forwarded from other channels.
  Block them even if a message has no links at all. 

  Default value: ~t~
- User Option: ~telega-adblock-block-msg-temex~ 

  Message's matching this temex will be ignored by adblock. 

  Default value: ~nil~
- User Option: ~telega-adblock-allow-msg-temex~ 

  Message's matching this temex will be allowed. 

  Default value: ~(or is-reply post-with-comments)~

** /telega-channels-export.el/ -- Export Telegam channels to OPML
:PROPERTIES:
:CUSTOM_ID: telega-channels-exportel--export-telegam-channels-to-opml
:END:

Use @@html:<kbd>@@M-x telega-channels-export RET@@html:</kbd>@@ to export public
channels shown in the rootbuf (i.e. matching Active Chat Filter)
into XML file of [[https://en.wikipedia.org/wiki/OPML][OPML]]
format.  Making it possible to import this file into any RSS reader
that supports OPML.

Customizable options:
- User Option: ~telega-channels-export-template~ 

  URL template where single %s is substituteed with channel username.
  Use rsshub or rssbrdige (or whatever that supports Telegram) url. 

  Default value: ~"https://sebsauvage.net/rss-bridge/?action=display&bridge=Telegram&username=%s&format=Atom"~

** /telega-bridge-bot.el/ -- Replace bridge bot user.
:PROPERTIES:
:CUSTOM_ID: telega-bridge-botel--replace-bridge-bot-user
:END:

This package advises some telega functions to replace the message
bridge bot (like [[https://t.me/matrix_t2bot][~@matrix_t2bot~]]), to
make it look like the user itself.  Currently only works for matrix
bridge bot, but can be extended to other bridges by adding more
handlers to the ~telega-bridge-bot--counterparty-handler-plist~ .

Enable it with:

#+begin_src emacs-lisp
  (require 'telega-bridge-bot)
#+end_src

and customize the ~telega-bridge-bot-bridge-info-plist~ to specify the
relationship between the bridge bot and the chat.

For example, if you want to replace the bridge bot
[[https://t.me/matrix_t2bot][~@matrix_t2bot~]] in the Telegram chat
[[https://t.me/emacs_china][~@emacs_china~]], you can set the following:

#+begin_src emacs-lisp
  (setq telega-bridge-bot-bridge-info-plist
        '(-1001773572820 ; id of the @emacs_china
  	(420415423 ; id of the @matrix_t2bot
  	 ;; will fetch member info with this matrix room id
  	 (:type :matrix :chat-id "!EGzPXoyqkJdTByDCjD:mozilla.org"))))
#+end_src

If you want download avatar from matrix, you should also set
~telega-bridge-bot-matrix-access-token~ or set
~telega-bridge-bot-matrix-user~ then put the access token in ~.authinfo~ ,
the host should be ~matrix.org~ and the user should be the same as
~telega-bridge-bot-matrix-user~.
This is required because only user in the room can access the member info.

* Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:

** Can't compile =telega-server=
:PROPERTIES:
:CUSTOM_ID: cant-compile-telega-server
:END:

**TODO**

** Invalid TDLib version
:PROPERTIES:
:CUSTOM_ID: invalid-tdlib-version
:END:

**TODO**

** Stickers are not shown
:PROPERTIES:
:CUSTOM_ID: stickers-are-not-shown
:END:

**Q**: Stickers are not fully shown, I see only outlines for some
stickers, like on the screenshot:
[[file:https:/zevlg.github.io/telega/bad-stickers.jpg]]

**A**: =telega= uses =dwebp= tool to convert stickers in the WEBP
format to the format supported by Emacs.  See
[[#stickers--animations][Stickers / Animations]] for details.

** Notifications does not work
:PROPERTIES:
:CUSTOM_ID: notifications-does-not-work
:END:

**Q**: I've enabled ~telega-notifications-mode~ as described in the
manual, but notifications still does not pop up.

**A**: Make sure your time is correct.  Eval ~(telega-time-seconds)~
to get UTC time in your Emacs, it should be more or less the same as
on https://www.unixtimestamp.com/
