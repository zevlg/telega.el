#+OPTIONS: timestamp:nil \n:t num:nil ellit-cid:t
#+TITLE: Telega Manual (v{{{eval(telega-version,t)}}})
#+STARTUP: showall

#+MACRO: nl          (eval (concat "\n" (make-string (1- (string-to-number $1)) ?\s)))
#+MACRO: user-option User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}
#+MACRO: user-option1 User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc1($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}

#+BEGIN_QUOTE
This file is automatically generated from {{{ellit-filename(verbatim)}}} by
[[https://github.com/zevlg/ellit-org.el][GitHub#ellit-org.el]] tool.
Do not edit manually.  Modify {{{ellit-filename(verbatim)}}} or comments in
=.el= files instead.
#+END_QUOTE

* Contents                                                     :nohtmlexport:
:PROPERTIES:
:TOC:      this
:END:
#+TOC: headlines 3

* Introduction

=telega= is full featured unofficial client for [[https://telegram.org][Telegram]] platform for [[https://www.gnu.org/software/emacs/][GNU Emacs]].

=telega= is actively developed, for this reason, some features are not
implemented, or they are present just as skeleton for future
implementation. However, the core parts are mature enough so that it
is possible to use =telega= on daily basis.

Join us at [[https://t.me/emacs_telega]]

* Installation

=telega= depends on the =visual-fill-column= and =rainbow-identifiers=
packages.  This dependency automatically installs if you install
=telega= from MELPA or GNU Guix.  Otherwise will you need to install
these packages by hand.

=telega= is built on top of the official library provided by Telegram
[[https://core.telegram.org/tdlib][TDLib]].  Most distributions do not provide this package in their
repositories, in which case you will have to install it manually by
following the instructions.

[[https://guix.gnu.org/][GNU Guix]], however, does have both =telega= and =TDLib= packaged.  If
you use GNU Guix you can skip directly to [[#installing-telega-and-tdlib-from-gnu-guix][Installing from GNU Guix]].

** Dependencies

- =GNU Emacs= (at least 26.1 is required with svg support)
- =GNU make= (known as gmake on BSD platforms)
- =GNU gperf= (for building TDLib)
- =CMake= (for building TDLib)
- =Python= (for testing the telega-server)
- =GNU Guix= _(optional, if using the Guix installation method)_

=make= is found in most of the modern machines. The other packages can
be download with the system package manager (such as =apt= for
Debian-based distributions, =dnf= for Fedora or =pacman= for
Arch-based).

*** MacOS users

1. If you are using [[https://emacsformacosx.com/][Emacs For Mac OS X]], or you installed Emacs by
   running ~$ brew cask install emacs~, your Emacs lacks svg support, so
   you cannot use telega. Please switch to [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]].

2. If you are using [[https://bitbucket.org/mituharu/emacs-mac/][Emacs-mac]], or you installed Emacs by running ~$
   brew install emacs-mac~ or ~$ brew cask install emacs-mac~, your
   Emacs has bug dealing with complex svg, which leads to Emacs
   hangups.  Compiling Emacs with rsvg support by running ~$ brew
   install emacs-mac --with-rsvg~ will fix this problem.

   NOTE: =telega= cannot display stickers correctly with emacs-mac,
   even when emacs-mac is compiled with rsvg support.  If you want
   sticker support, please consider switching to emacs-plus.

3. [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] is the best choice to run =telega=.

*** Linux users

=telega= requires at least GNU Emacs 26.1 with optional, but highly
recommended, =svg= support. If Emacs version is less then 27.1, then
=imagemagick= is also required.  Most distributions provide GNU Emacs
compiled with these dependencies when installing GNU Emacs with GTK+
support (graphical).

*** Building TDLib

[[https://core.telegram.org/tdlib][TDLib]] is the library for building Telegram clients. It requires a
large amount of memory to be built.  Make sure you are using TDLib
version greater or equal to {{{eval(telega-tdlib-min-version)}}}.

On MacOS you can install a pre-built =TDLib= package using homebrew from
[[https://brew.sh][brew.sh]].  Just run:
#+begin_src shell
$ brew install tdlib
#+end_src

On Linux, you will need to build =TDLib= from source.

To get the source:
#+begin_src shell
$ git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with ~$ cd ./td~ or wherever you checked out
=td=.

Prepare a folder for building the library:
#+begin_src shell
$ mkdir build && cd build && cmake ../
#+end_src

Build the sources:
#+begin_src shell
$ make -jN
#+end_src

with ~N~ number of cores that should be used for the compilation (the
optimal value is the number of physical cores on the machine).

Finally, to install the library system-wide:
#+begin_src shell
$ sudo make install
#+end_src

It will install headers to =/usr/local/include= and library itself
into =/usr/local/lib=.  If you have TDLib installed in other location,
don't forget to modify ~telega-server-libs-prefix~ before starting
=telega=.

** Installing telega and TDLib from [[https://guix.gnu.org/][GNU Guix]]

=telega= and =TDLib= are both available in GNU Guix. If you have a
resource constrained machine or would simply prefer to bypass
compiling =TDLib= from source, this is a good option!

On Guix System:
#+begin_src shell
$ guix package -i emacs-telega font-gnu-{unifont,freefont}
#+end_src

The latter two packages provide glyphs used by =telega=.

On "Foreign" Distributions:
- Use the shell installer script, or install GNU Guix manually on-top
  of your current distribution. [[https://guix.gnu.org/manual/en/html_node/Installation.html#Installation][Installation Documentation]]

- Enable fetching substitutes from the build server cache if you do
  not wish to build from source. [[https://guix.gnu.org/manual/en/html_node/Substitute-Server-Authorization.html#Substitute-Server-Authorization][Substitute Server Authorization]]

- And finally, run:
  #+begin_src shell
  $ guix package -i emacs emacs-telega
  #+end_src

It is easiest to use the version of Emacs installed from GNU Guix
because it is modified with an autoloader to identify and
automatically use Emacs packages installed from Guix. Alternatively,
if you wish to use the bundle of Emacs provided by your distribution,
you may install the =telega= elisp sources through MELPA and use Guix
to provide the server binary precompiled.

Consult the official GNU Guix documentation for further
questions. Issues related to the GUIX package must be accompanied by
the [[https://github.com/zevlg/telega.el/labels/guix][GUIX label]] in the issue tracker.

Do note that since =telega= is actively maintained installations from
Guix might at times lag behind master, but regular attempts to keep it
updated will occur.  If the version in Guix is too outdated or is
missing a feature, please use the protocol for the issue tracker.

** Installing telega from MELPA

=telega= is available from [[https://melpa.org][MELPA]], so you can install it from there as
usual package.  This is a preferable method, because it will
automatically handle all dependencies and provides autoloads.

Or you could use git repository with this melpa-style recipe for [[https://github.com/quelpa/quelpa][quelpa]]:

#+begin_src emacs-lisp
(quelpa '(telega :fetcher github
                 :repo "zevlg/telega.el"
                 :branch "master"
                 :files (:defaults "etc" "server" "Makefile")))
#+end_src

** Installing telega directly from GitHub

Make sure dependencies are installed with {{{kbd(M-x package-install
RET visual-fill-column RET)}}} and {{{kbd(M-x package-install RET
rainbow-identifiers RET)}}}.

Get the source:
#+begin_src shell
$ git clone https://github.com/zevlg/telega.el
$ cd telega.el
$ make compile
#+end_src

Finally load =telega= into Emacs using:
#+begin_src emacs-lisp
(use-package telega
  :load-path  "~/telega.el"
  :commands (telega)
  :defer t)
#+end_src

Or with:
#+begin_src emacs-lisp
(add-to-list 'load-path "~/telega.el")
(require 'telega)
#+end_src

The code should be put in the configuration file for Emacs, which
usually is =init.el=, or =emacs.el=.

* Getting started

Start =telega= with {{{kbd(M-x telega RET)}}}. The first time it will
ask for the phone number you have associated with the Telegram
network.

Some options affecting =TDLib= runtime:
- {{{user-option(telega-directory, 2)}}}
- {{{user-option(telega-options-plist, 2)}}}
- {{{user-option(telega-proxies, 2)}}}
- {{{user-option(telega-my-location, 2)}}}

To list all available customizable user options use ~M-x
customize-group RET telega RET~ command.

* Settings for Emacs As Daemon

Some people starts Emacs in daemon mode, i.e. =emacs --daemon=.  Such
Emacs instance has no frames, frames are created when needed and
connects to the daemon process.

=telega= autodetects values for some variables at start by examining
current frame parameters and window system posibilites.  This won't
work in daemon mode.  You need to explicitely specify values for that
variables.  Most notable options are:
- {{{user-option(telega-use-images, 2)}}}
- {{{user-option(telega-emoji-font-family, 2)}}}
- {{{user-option(telega-emoji-use-images, 2)}}}
- {{{user-option(telega-online-status-function, 2)}}}

* Telega glossary

Before start, please read [[https://core.telegram.org/tdlib/getting-started#tdlib-glossary][TDLib glossary]]

=telega= tries to keep TDLib's terminology, however introduces some
new terms specific to =telega=.  All of them are used in the manual.

- Root Buffer a.k.a. rootbuf ::
  Buffer with list of chats, you see it just after {{{kbd(M-x telega RET)}}}.
  Most of the time rootbuf term is used in the manual.
  See [[#root-buffer][Root Buffer]]

- Root View ::
  Root Buffer can be shown in different ways.  Way rootbuf is shown is
  called root view.
  See [[#root-buffer][Root Buffer]]

- Chat Buffer a.k.a. chatbuf ::
  Buffer with chat contents.
  See [[#chat-buffer][Chat Buffer]]

- Button ::
  Ordinary Emacs Button (see =button.el=).  Some outlined area with
  text, that can be acted on.  Pressing {{{kbd(RET)}}} on the
  button, executes button action.  There are many buttons of different
  kind in =telega=

- Chat Button ::
  Button referring to some chat.  Action for such button is to open
  corresponding chatbuf.

  rootbuf lists the chat buttons, such as:
  #+begin_example
  {🎗Saved Messages            }📌  📹 Video (10s)               Fri✓
  [Emacs | Emacs (english)     ]  @oldosfan: same                Fri
  ...
  #+end_example

- Chat Filter ::
  S-exp expression used to match chats.
  See [[#chat-filters][Chat Filters]] for the details.

- Active Chat Filter ::
  Chat filter applied to the chat list in rootbuf.

  Only chats matching active chat filter are displayed in rootbuf.
  Active chat filter is displayed above the chat list in rootbuf, such
  as:
  #+begin_example
  -/------------------------------(main)--------------------------------
  #+end_example

  ~(telega-filter-active)~ returns active chat filter.

  - {{{user-option(telega-filter-default, 4)}}}

- Custom Chat Filter ::
  Chat filter associated with a name.

  Custom chat filters are displayed as buttons above the chat list in
  the rootbuf, such as:
  #+begin_example
  [243:📑Main      4890]  [51:Groups       4677]  [27:Channels      210]
  [53:Contacts         ]  [0:Important         ]  [3:📑Archive      670]
  #+end_example

  Action for such buttons is to add corresponding chat filter to
  active chat filter.

  However, buttons that corresponds to a Telegram Folder, including
  "Main" and "Archive", substitutes folder in active chat filter with
  new one at button.

  + {{{user-option(telega-filter-button-width, 4)}}}
  + {{{user-option(telega-filters-custom, 4)}}}
  + {{{user-option(telega-filter-custom-expand, 4)}}}
  + {{{user-option(telega-filter-custom-show-folders, 4)}}}

- Chat Sort Criteria ::
  List of symbols denoting how to sort chats.
  See [[#sorting-chats][Sorting Chats]]

- Active Sort Criteria a.k.a. active sorter ::
  Sort criteria applied to the chat list in rootbuf.

  By default, chats are sorted according to internal Telegram order
  (except for chats with custom order).

  In case active sorter is enabled, it is displayed above the chat
  list in rootbuf, such as:
  #+begin_example
  -\---------------------(unread-count join-date)-----------------------
  #+end_example

- Me user a.k.a. me ::
  User currently logged in, ~(telega-user-me)~ returns me.

  me means you, not me.

  Chat with me is also known as "Saved Messages".

* Telega prefix map

=telega= has prefix map for common =telega= commands, such as
switching to rootbuf, switch to "SavedMessages", sending current
buffer as file to a chat, switching accounts, openning chat or
switching to some chat.

It is convenient to have it somewhere accessible from ~global-map~,
say {{{kbd(C-c t)}}}.  To do so use next code in your =init.el=:

#+begin_src
(define-key global-map (kbd "C-c t") telega-prefix-map)
#+end_src

Or if =telega= is not accessible to autoload at start time, then use:

#+begin_src
(add-hook 'telega-load-hook
          (lambda ()
            (define-key global-map (kbd "C-c t") telega-prefix-map)))
#+end_src

Telega prefix map bindings:

#+ELLIT-INCLUDE: ../telega.el :label prefix-map-bindings

* Root Buffer

#+ELLIT-INCLUDE: ../telega-root.el :label commentary

Important customizable options:
- {{{user-option(telega-root-fill-column, 2)}}}
- {{{user-option(telega-root-keep-cursor, 2)}}}

** Rootbuf fast navigation

{{{kbd(M-g)}}} prefix in rootbuf is used to jump across chat buttons:

#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-fastnav-bindings

** Rootbuf view switching

Rootbuf view is the specific way how rootbuf is shown to the user.  By
default, list of the chats is shown, this is known as default root
view.

{{{kbd(v)}}} prefix in rootbuf is used to switch root views:
#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-view-bindings

Important customizable options:
- {{{user-option(telega-root-default-view-function, 2)}}}

  {{{where-is(telega-view-reset,telega-root-mode-map)}}} uses this
  function to reset root view.

* Chat Folders

#+ELLIT-INCLUDE: ../telega-folders.el :label commentary

{{{kbd(F)}}} prefix in rootbuf is used to operate on Chat Folders:
#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-folder-bindings

Customizable options for Chat Folders:
#+ELLIT-INCLUDE: ../telega-customize.el :label folders-options

* Chat Filters

#+ELLIT-INCLUDE: ../telega-filter.el :label commentary

{{{kbd(/)}}} prefix in rootbuf is used for some useful filtering
commands:

- {{{where-is(telega-filter-by-important,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-important, 2)}}}
- {{{where-is(telega-filter-by-folder,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-folder, 2)}}}
- {{{where-is(telega-filters-edit,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-edit, 2)}}}
- {{{where-is(telega-filter-by-filter,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-filter, 2)}}}
- {{{where-is(telega-filters-pop-last,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-pop-last, 2)}}}
- {{{where-is(telega-filters-negate,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-negate, 2)}}}
- {{{where-is(telega-filters-reset,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-reset, 2)}}}

For other Chat Filter bindings see below.

** List of chat filters

#+ELLIT-INCLUDE: ../telega-filter.el :label chat-filters

** Customizable options making use of Chat Filters

- {{{user-option(telega-filter-default, 2)}}}
- {{{user-option(telega-filters-custom, 2)}}}
- {{{user-option(telega-use-tracking-for, 2)}}}
- {{{user-option(telega-rainbow-color-custom-for, 2)}}}
- {{{user-option(telega-chat-prompt-show-avatar-for, 2)}}}
- {{{user-option(telega-chat-group-messages-for, 2)}}}
- {{{user-option(telega-chat-show-deleted-messages-for, 2)}}}
- {{{user-option(telega-root-view-topics, 2)}}}

* Sorting chats

#+ELLIT-INCLUDE: ../telega-sort.el :label commentary

{{{kbd(\)}}} prefix in rootbuf is used for sorting commands:

- {{{where-is(telega-sort-reset,telega-root-mode-map)}}} ::
  {{{fundoc(telega-sort-reset, 2)}}}

  It is possible to add multiple criteria using ~telega-sort-reset~
  with prefix argument {{{kbd(C-u)}}}.

- {{{where-is(telega-sort-by-sorter,telega-root-mode-map)}}} ::
  {{{fundoc(telega-sort-by-sorter, 2)}}}

  Use this command to reset active sorter.

For other sorting keybindings see below.

** Sorting criteria

#+ELLIT-INCLUDE: ../telega-sort.el :label chat-sorting-criteria

** Customizable options making use of sorting criteria

- {{{user-option(telega-chat-completing-sort-criteria, 2)}}}
- {{{user-option(telega-chat-switch-buffer-sort-criteria, 2)}}}

* Chat buffer

#+ELLIT-INCLUDE: ../telega-chat.el :label commentary

Important customizable options:
- {{{user-option(telega-chat-fill-column, 2)}}}

** Chatbuf fast navigation

{{{kbd(M-g)}}} prefix in chatbuf is used to jump across various chat
messages:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-fastnav-bindings

** Sending ordinary messages

Type a text in the chatbuf input and press {{{kbd(RET)}}}.

You can use markdown markup with next syntax:
#+begin_example
  1. *bold text*
  2. _italic text_
  2.1) __underline text__    (only for v2)
  2.2) ~strike through text~ (only for v2)
  3. `inlined code`
  4. ```<language-name-not-displayed>
      first line of multiline preformatted code
      second line
      last line```
  5. [link text](http://actual.url)
  6. [username](tg://user?id=<USER-ID>)"
#+end_example

To apply markdown markup use {{{kbd(C-u RET)}}} to send a message.

You can even intermix various markups, using {{{kbd(C-c C-a markup
RET)}}} command.

To send media, along the side with the text message, use [[#attaching-media][media
attaching]] commands.

Important customizable options:
- {{{user-option1(telega-chat-use-markdown-version,2)}}}

** Attaching media

You can attach various media into chatbuf input, using next bindings:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-attach-bindings

Attachment types to attach with
{{{where-is(telega-chatbuf-attach,telega-chat-mode-map)}}} defined in
~telega-chat-attach-commands~ user option:
{{{eval((mapconcat (lambda (ac)
(concat "- " (nth 0 ac) " :: " (ellit-org-template-fundoc (nth 2 ac) "2"))) telega-chat-attach-commands "\n"),t)}}}

Special attachment types are =disable-webpage-preview=, =scheduled=,
=disable-notification= or =enable-notification=.  They do not attach
anything, but changes options on how to send the message.  Use
=scheduled= to [[#scheduling-messages-and-reminders][schedule messages]], =disable-notification= or
=enable-notification= to trigger notification on receiver side and
=disable-webpage-preview= to disable rich web page previews for URLs
in the message text.

Customizable options for attaching media:
- {{{user-option(telega-chat-upload-attaches-ahead, 2)}}}
- {{{user-option(telega-chat-markup-functions, 2)}}}

** Replying and editing messages

To reply/edit the message, put point on the message you want to
reply/edit and press
{{{where-is(telega-msg-reply,telega-msg-button-map)}}} to reply or
{{{where-is(telega-msg-edit,telega-msg-button-map)}}} to edit.

Aux prompt will be show just above the chatbuf prompt, such as:
#+begin_example
[✕]| Reply: @demash> Trying to install telega  M-x packag…
(T)>>> 
#+end_example

To cancel aux prompt press on the cross button, or use
{{{where-is(telega-chatbuf-cancel-aux,telega-chat-mode-map)}}}
binding.
{{{where-is(telega-chatbuf-cancel-aux,telega-chat-mode-map)}}} accepts
{{{kbd(C-u)}}} prefix, if used then chatbuf's input is also canceled.

To edit your privously sent message press
{{{where-is(telega-chatbuf-edit-prev,telega-chat-mode-map)}}}.

** Forwarding messages

To forward a message, put cursor under the message which you want to
forward and press
{{{where-is(telega-msg-forward-marked-or-at-point,telega-msg-button-map)}}}
and then select a Chat to forward a message to.  To forward multiple
messages at once, mark messages with the
{{{where-is(telega-msg-mark-toggle,telega-msg-button-map)}}} and then
press
{{{where-is(telega-msg-forward-marked-or-at-point,telega-msg-button-map)}}}
on one of the messages.

There are few options how you can affect the way a message is forwarded:
1. {{{kbd(C-u f)}}} to forward a message copy, it will look like *you*
   sent a message.
2. {{{kbd(C-u C-u f)}}} To forward a message copy deleting or
   replacing capition it has.  Use this to forward media message with
   your own caption.

** Deleting messages

To delete a message, put cursor under the message you want to delete and press
{{{where-is(telega-msg-delete-marked-or-at-point,telega-msg-button-map)}}}.

As with [[#forwarding-messages][forwarding messages]], you can mark multiple messages to delete
with {{{where-is(telega-msg-mark-toggle,telega-msg-button-map)}}}.

=telega= can keep deleted messages visible until chatbuf is
killed. This is controlled using custom variable:

- {{{user-option(telega-chat-show-deleted-messages-for,2)}}}

For example, to show deleted messages in all chats except for "Saved
Messages", use next:
#+begin_src emacs-lisp
(setq telega-chat-show-deleted-messages-for '(not saved-messages))
#+end_src

** Scheduling messages and reminders

To schedule a message, press {{{kbd(C-c C-a scheduled RET)}}},
select date and time to schedule message at, type text of a message
and send it as always.

Message scheduled in "Saved Messages" chat is called reminder.

Whenever a scheduled message or reminder is sent, you get a special
notification marked with a 📅, so you don't get caught off-guard by
messages you planned in the past.

** Navigating previous input

You can navigate your previous chatbuf input using commands:
- {{{where-is(telega-chatbuf-edit-prev,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-edit-prev,2)}}}
- {{{where-is(telega-chatbuf-edit-next,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-edit-next,2)}}}
- {{{where-is(telega-chatbuf-input-search,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-input-search,2)}}}

  While searching input, you can use
  {{{where-is(telega-chatbuf--input-search-input-prev,telega-chatbuf--input-search-map)}}}
  and
  {{{where-is(telega-chatbuf--input-search-input-next,telega-chatbuf--input-search-map)}}}
  to cycle chatbuf input ring.

** Completing input in chatbuf

Powerful =company-mode= could be used to complete input in the
chatbuf.

=telega= provides few company backends, such as:

- telega-company-emoji :: Complete emojis via ~:<emoji>:~
  syntax. Completion is done using predefined set of emojis.

  Customizable Options:
  - {{{user-option(telega-emoji-fuzzy-match, 4)}}}

- telega-company-telegram-emoji :: Same as ~telega-company-emoji~, but
  uses Telegram cloud for the emojis completion.

- telega-company-username :: Complete user mentions via ~@<username>~
  syntax. Here is the screenshot, showing use of this backend:
  [[file:https://zevlg.github.io/telega/completing-usernames.jpg]]

- telega-company-botcmd :: Complete bot commands via ~/<botcmd>~
  syntax.  This backend does not complete if ~/<botcmd>~ syntax is
  used in the middle of the chatbuf input, only if ~/<botcmd>~ starts
  chatbuf input.

- telega-company-hashtag :: Complete common hashtags via ~#<hashtag>~
  syntax.

=company-mode= setup might look like:
#+begin_src elisp
(setq telega-emoji-company-backend 'telega-company-emoji)

(defun my-telega-chat-mode ()
  (set (make-local-variable 'company-backends)
       (append (list telega-emoji-company-backend
                     'telega-company-username
                     'telega-company-hashtag)
               (when (telega-chat-bot-p telega-chatbuf--chat)
                 '(telega-company-botcmd))))
  (company-mode 1))

(add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

Consider also using =company-posframe= Emacs package (in MELPA), so
chatbuf's contents remain untouched when completion menu pops above
the chatbuf prompt.

** Sending messages via bots

If chatbuf input starts with =@<botname> <query>= and mentioned bot
support [[https://telegram.org/blog/inline-bots][inline mode]], then pressing
{{{where-is(telega-chatbuf-complete-or-next-link,telega-chat-mode-map)}}}
will pop a special buffer with the inline results to the bot inline
~<query>~, you can use these results to send a message via bot.  Some
useful bots with [[https://telegram.org/blog/inline-bots][inline mode]] support are:

- [[https://t.me/gif][@gif]] To search and send animations
- [[https://t.me/pic][@pic]], [[https://t.me/bing][@bing]] To search and send pictures
- [[https://t.me/vid][@vid]] To search and send videos on YouTube
- [[https://t.me/foursquare][@foursquare]] - To find and send places around the world
- etc

To find out is some bot supports [[https://telegram.org/blog/inline-bots][inline mode]] or not, enter
~@<botname><SPC>~ in chatbuf input and press
{{{where-is(telega-chatbuf-complete-or-next-link,telega-chat-mode-map)}}}.
If momentary help is displayed, then this bot supports inline mode.

Customizable options for inline bots:
#+ELLIT-INCLUDE: ../telega-customize.el :label inline-bot-options

** Filtering chat messages a.k.a. Shared Media

Message filtering means to show only some messages matching filter.
Available message filters are: {{{eval((mapconcat (lambda (mf) (concat
"=" (car mf) "=")) telega-chat--message-filters "\, "),t)}}}

Chatbuf uses next bindings for message filtering:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-filtering-bindings

** Opening files using external programs

Document messages in Telegram has attached file in the message.  By
default =telega= opens that files inside Emacs using {{{eval((format
"~%S~" telega-open-file-function),t)}}} function.  Sometimes that is not
desirable behaviour and you might want to open some files in external
application.  You can use ~org-open-file~ function for this.
Behaviour is controlled by:
- {{{user-option(telega-open-file-function, 2)}}}

Setup to open some files in external applications might look like:
#+begin_src emacslisp
;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
;; Use "xdg-open" to open files by default
(setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)

(setq telega-open-file-function 'org-open-file)
#+end_src

If you also want to open non-document messages as file using
~telega-open-file-function~ consider:
- {{{user-option(telega-open-message-as-file, 2)}}}

** Client side messages ignoring

In official telegram clients all messages in group chats are displayed
even if message has been sent by blocked sender (user or chat).
=telega= has client side message ignoring feature implemented.
Ignoring messages can be done via installing special functions into
~telega-chat-insert-message-hook~, which could mark message as
ignored, for example, to ignore messages from particular user with
id=12345 you could add next code:

#+begin_src emacs-lisp
(defun my-telega-ignore-12345-user (msg &rest notused)
  (let ((sender (telega-msg-sender msg)))
    (when (and (telega-user-p sender)
               (= (plist-get sender :id) 12345))
      (telega-msg-ignore msg))))

(add-hook 'telega-chat-insert-message-hook 'my-telega-ignore-12345-user)
#+end_src

Or to ignore messages from blocked senders (users or chats), just add:

#+begin_src emacs-lisp
(add-hook 'telega-chat-insert-message-hook 'telega-msg-ignore-blocked-sender)
#+end_src

To view recent messages that has been ignored use
~M-x telega-ignored-messages RET~ command.

* Multiple accounts

=telega= support multiple accounts, however only single account can be
active, i.e. you can't run account simultaneously, but you can switch
between accounts.  Notifications won't work for inactive accounts.

To switch accounts use
{{{where-is(telega-account-switch,telega-prefix-map)}}} from [[#telega-prefix-map][prefix
map]].  To setup multiple accounts use:

- {{{user-option(telega-accounts, 2)}}}

  For example:
  #+begin_src emacs-lisp
  (setq telega-accounts (list
    (list "zevlg" 'telega-database-dir telega-database-dir)
    (list "Evgen2" 'telega-database-dir
      (expand-file-name "evgen2" telega-database-dir))))
  #+end_src

  Each account can have its own configuration using custom variables
  specified in account setup, and only ~telega-database-dir~ must be
  different for different accounts.

* Minor Modes

=telega= ships with various minor modes you might consider to use.

** Notifications for incoming messages

#+ELLIT-INCLUDE: ../telega-notifications.el :label commentary

In order for message to trigger notification, few conditions should be
satisfied.

#+ELLIT-INCLUDE: ../telega-notifications.el :label notification-conditions

See also [[#telega-alertel--notifications-using-alertel][Notifications using alert.el]]

#+ELLIT-INCLUDE: ../telega-modes.el :label minor-modes

* Contributed packages

=contrib/= directory contains packages contributed to =telega.el=
project.

#+ELLIT-INCLUDE: ../contrib/ol-telega.el

#+ELLIT-INCLUDE: ../contrib/telega-status-history.el

#+ELLIT-INCLUDE: ../contrib/telega-url-shorten.el

#+ELLIT-INCLUDE: ../contrib/telega-alert.el

#+ELLIT-INCLUDE: ../contrib/telega-dired-dwim.el

#+ELLIT-INCLUDE: ../contrib/telega-live-location.el :no-load t

#+ELLIT-INCLUDE: ../contrib/telega-mnz.el

* Troubleshooting
** Warning for TDLib version below minimum required, even though correct version is installed
If at starting telega you get the warning =TDLib version=%s < %s (min required),please upgrade TDLib and recompile `telega-server= even though your tdlib version is satisfying telega's requirements, be aware that deleting the telega package and reinstalling it via melpa will not recompile the server, run =telega-server-build= instead.
#  LocalWords:  customizable chatbuf tdlib gmake
