#+OPTIONS: timestamp:nil \n:t num:nil ellit-cid:t
#+TITLE: Telega Manual (v{{{eval(telega-version,t)}}})
#+STARTUP: showall

#+MACRO: nl          (eval (concat "\n" (make-string (1- (string-to-number $1)) ?\s)))
#+MACRO: user-option-ndv User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc($1, $2)}}} {{{nl(1)}}}
#+MACRO: user-option User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}
#+MACRO: user-option1 User Option: ~$1~ {{{nl(1)}}} {{{nl($2)}}} {{{vardoc1($1, $2)}}} {{{nl(1)}}} {{{nl($2)}}} Default value: {{{eval((ellit-org-pp-code-block $1 $2), t)}}}

#+MACRO: temexdoc    (eval (ellit--indented-docstring (ellit-org--fundoc (telega-match--temex-function (intern $1) (intern (string-trim $2)))) $3))

#+ELLIT-INCLUDE: telega-note-file :eval

* Contents                                                     :nohtmlexport:
:PROPERTIES:
:TOC:      this
:END:
#+TOC: headlines 3

* Introduction

=telega= is full featured unofficial client for [[https://telegram.org][Telegram]] platform for [[https://www.gnu.org/software/emacs/][GNU Emacs]].

=telega= is actively developed, for this reason, some features are not
implemented, or they are present just as skeleton for future
implementation. However, the core parts are mature enough so that it
is possible to use =telega= on daily basis.

Join us at [[https://t.me/emacs_telega]]

If you enjoy =telega=, consider making a [[https://opencollective.com/telega][donation for unstoppable
development]], also see benefits you get [[#telega-patrons-mode][being telega patron]].

* Installation

=telega= depends on the =visual-fill-column= and =rainbow-identifiers=
packages.  This dependency automatically installs if you install
=telega= from MELPA or GNU Guix.  Otherwise will you need to install
these packages by hand.

=telega= is built on top of the official library provided by Telegram
[[https://core.telegram.org/tdlib][TDLib]].  Most distributions do not provide this package in their
repositories, in which case you will have to install it manually by
following the instructions.

[[https://guix.gnu.org/][GNU Guix]], however, does have both =telega= and =TDLib= packaged.  If
you use GNU Guix you can skip directly to [[#installing-telega-and-tdlib-from-gnu-guix][Installing from GNU Guix]].

Also, you can use [[https://www.docker.com/][Docker]] to avoid complicated installation steps by
using one of the provided docker images.  See [[#running-telega-server-in-docker][Running telega-server in
docker]] for details.

** Dependencies

- =GNU Emacs= (at least 26.1 is required with svg support)
- =GNU make= (known as gmake on BSD platforms)
- =GNU gperf= (for building TDLib)
- =CMake= (for building TDLib)
- =pkg-config= (for building =telega-server=)

**Optional dependencies**:
- =Python= (optional, for testing the =telega-server=)
- =GNU Guix= _(optional, if using the Guix installation method)_
- =libappindicator3= (optional, to show =telega= icon/info in system
  tray)
- =dwebp= (optional, to display [[#stickers--animations][Stickers]])
- =tgs2png= (optional, for [[#animated-stickers][Animated Stickers]]), sources are at
  https://github.com/zevlg/tgs2png

=make= is found in most of the modern machines. The other packages can
be download with the system package manager (such as =apt= for
Debian-based distributions, =dnf= for Fedora or =pacman= for
Arch-based).

** MacOS users

1. If you are using [[https://emacsformacosx.com/][Emacs For Mac OS X]], or you installed Emacs by
   running ~$ brew cask install emacs~, make sure you installed a
   recent enough version (>= =emacs-27.1-mac-8.1=, you can check your
   version by running ~$ brew info emacs-mac~ or ~$ brew cask info
   emacs-mac~) with rsvg support (~$ brew install emacs-mac
   --with-librsvg~), or your Emacs may not display some media
   correctly, in this case consider switching to [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]].

2. If you are using [[https://bitbucket.org/mituharu/emacs-mac/][Emacs-mac]], or you installed Emacs by running ~$
   brew install emacs-mac~ or ~$ brew cask install emacs-mac~, your
   Emacs has bug dealing with complex svg, which leads to Emacs
   hangups.  Compiling Emacs with rsvg support by running ~$ brew
   install emacs-mac --with-librsvg~ will fix this problem.

   NOTE: =telega= cannot display stickers correctly with emacs-mac,
   even when emacs-mac is compiled with rsvg support.  If you want
   sticker support, please consider switching to emacs-plus.

3. [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] is the best choice to run =telega=.

** Linux users

=telega= requires at least GNU Emacs 26.1 with optional, but highly
recommended, =svg= support. If Emacs version is less then 27.1, then
=imagemagick= is also required.  Most distributions provide GNU Emacs
compiled with these dependencies when installing GNU Emacs with GTK+
support (graphical).

** Windows 10 users

See [[https://ritschmaster.github.io/2021/06/13/Using-telga-in-Windows-10.html][detailed description]] how to install =telega= under Windows 10.

Thanks to [[https://t.me/ritsch_master][=@ritsch_master=]]

** Building TDLib

[[https://core.telegram.org/tdlib][TDLib]] is the library for building Telegram clients. It requires a
large amount of memory to be built.  Make sure you are using TDLib
version greater or equal to {{{eval(telega-tdlib-min-version, t)}}}.

On MacOS you can install a pre-built =TDLib= package using homebrew from
[[https://brew.sh][brew.sh]].  Just run:
#+begin_src shell
$ brew install tdlib
#+end_src

On Linux, you will need to build =TDLib= from source.  Use 
[[https://tdlib.github.io/td/build.html][TDLib build instructions generator]] for comprehensive build
instructions.

In general, you need to install all [[https://github.com/tdlib/td/#dependencies][TDLib dependencies]] then get TDLib
sources and compile them using =CMake=.

To get the source:
#+begin_src shell
$ git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with ~$ cd ./td~ or wherever you checked out
=td=.

Prepare a folder for building the library:
#+begin_src shell
$ mkdir build && cd build && cmake ../
#+end_src

Build the sources:
#+begin_src shell
$ make -jN
#+end_src

with ~N~ number of cores that should be used for the compilation (the
optimal value is the number of physical cores on the machine).

Finally, to install the library system-wide:
#+begin_src shell
$ sudo make install
#+end_src

It will install headers to =/usr/local/include= and library itself
into =/usr/local/lib=.  If you have TDLib installed in other location,
don't forget to modify ~telega-server-libs-prefix~ before starting
=telega=.

** Installing telega and TDLib from [[https://guix.gnu.org/][GNU Guix]]

=telega= and =TDLib= are both available in GNU Guix. If you have a
resource constrained machine or would simply prefer to bypass
compiling =TDLib= from source, this is a good option!

On Guix System:
#+begin_src shell
$ guix package -i emacs-telega font-gnu-{unifont,freefont}
#+end_src

The latter two packages provide glyphs used by =telega=.

On "Foreign" Distributions:
- Use the shell installer script, or install GNU Guix manually on-top
  of your current distribution. [[https://guix.gnu.org/manual/en/html_node/Installation.html#Installation][Installation Documentation]]

- Enable fetching substitutes from the build server cache if you do
  not wish to build from source. [[https://guix.gnu.org/manual/en/html_node/Substitute-Server-Authorization.html#Substitute-Server-Authorization][Substitute Server Authorization]]

- And finally, run:
  #+begin_src shell
  $ guix package -i emacs emacs-telega
  #+end_src

It is easiest to use the version of Emacs installed from GNU Guix
because it is modified with an autoloader to identify and
automatically use Emacs packages installed from Guix. Alternatively,
if you wish to use the bundle of Emacs provided by your distribution,
you may install the =telega= elisp sources through MELPA and use Guix
to provide the server binary precompiled.

Consult the official GNU Guix documentation for further
questions. Issues related to the GUIX package must be accompanied by
the [[https://github.com/zevlg/telega.el/labels/guix][GUIX label]] in the issue tracker.

Do note that since =telega= is actively maintained installations from
Guix might at times lag behind master, but regular attempts to keep it
updated will occur.  If the version in Guix is too outdated or is
missing a feature, please use the protocol for the issue tracker.

** Installing telega from MELPA

=telega= is available from [[https://melpa.org][MELPA]], so you can install it from there as
usual package.  This is a preferable method, because it will
automatically handle all dependencies and provides autoloads.

For TDLib {{{eval((car telega-tdlib-releases), t)}}} release you might
consider stable =telega= version.  Stable =telega= version won't
require you to rebuild TDLib until next TDLib {{{eval((cdr
telega-tdlib-releases), t)}}} release, =telega= updates will work with
{{{eval((car telega-tdlib-releases), t)}}}.  Stable =telega= is placed
in [[https://stable.melpa.org/][MELPA Stable]].  Package configuration for =telega= from MELPA Stable
might look like:
#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-pinned-packages '(telega . "melpa-stable"))
#+end_src

=telega= from unstable [[https://melpa.org][MELPA]] is a bleeding edge of the =telega=
development and =telega= updates might require also TDLib
update/rebuild sometimes.  However, it brings you all newer (probably
incompatible with TDLib {{{eval((car telega-tdlib-releases), t)}}})
functionality faster, no need to wait for TDLib {{{eval((cdr
telega-tdlib-releases), t)}}} to access newer features.

Or you could use git repository with this melpa-style recipe for [[https://github.com/quelpa/quelpa][quelpa]]:

#+begin_src emacs-lisp
(quelpa '(telega :fetcher github
                 :repo "zevlg/telega.el"
                 :branch "master"
                 :files (:defaults "contrib" "etc" "server" "Makefile")))
#+end_src

** Installing telega directly from GitHub

Make sure dependencies are installed with {{{kbd(M-x package-install
RET visual-fill-column RET)}}} and {{{kbd(M-x package-install RET
rainbow-identifiers RET)}}}.

Get the source:
#+begin_src shell
$ git clone https://github.com/zevlg/telega.el
$ cd telega.el
$ make compile
#+end_src

Finally load =telega= into Emacs using:
#+begin_src emacs-lisp
(use-package telega
  :load-path  "~/telega.el"
  :commands (telega)
  :defer t)
#+end_src

Or with:
#+begin_src emacs-lisp
(add-to-list 'load-path "~/telega.el")
(require 'telega)
#+end_src

The code should be put in the configuration file for Emacs, which
usually is =init.el=, or =emacs.el=.

** Running telega-server in docker

Pull latest =telega-server= image:
#+begin_src shell
$ docker pull zevlg/telega-server:latest
#+end_src

Make =telega= know you want to use docker by adding this to your =init.el=:
#+begin_src emacs-lisp
(setq telega-use-docker t)
#+end_src

That's it, you are ready to get starting.  However, you might anyway
need to have local =ffmpeg= installation to utilize some =telega=
features, such as playing audio/voice messages, capturing video/voice
notes, etc.

* Getting started

Start =telega= with {{{kbd(M-x telega RET)}}}. The first time it will
ask for the phone number you have associated with the Telegram
network.

Some options affecting =TDLib= runtime:
- {{{user-option-ndv(telega-directory, 2)}}}

  Default value: "~/.telega"

- {{{user-option(telega-options-plist, 2)}}}
- {{{user-option(telega-proxies, 2)}}}
- {{{user-option(telega-my-location, 2)}}}

  See also [[#telega-my-location-mode][telega-my-location-mode]] to automatically update
  ~telega-my-location~ when you send location message to the
  "Saved Messages" using mobile Telegram client.

To list all available customizable user options use ~M-x
customize-group RET telega RET~ command.

* Settings for Emacs As Daemon

Some people starts Emacs in daemon mode, i.e. =emacs --daemon=.  Such
Emacs instance has no frames, frames are created when needed and
connects to the daemon process.

=telega= autodetects values for some variables at load time by
examining current frame parameters and window system possibilities.
This won't work in daemon mode.  You need to explicitly specify values
for that variables.  Most notable options are:
- {{{user-option-ndv(telega-use-images, 2)}}}
- {{{user-option-ndv(telega-emoji-font-family, 2)}}}
- {{{user-option-ndv(telega-emoji-use-images, 2)}}}
- {{{user-option-ndv(telega-online-status-function, 2)}}}

Setting ~telega-use-images~ **before** loading =telega= is essential,
because many other custom options depends on its value.

* Telega glossary

Before start, please read [[https://core.telegram.org/tdlib/getting-started#tdlib-glossary][TDLib glossary]]

=telega= tries to keep TDLib's terminology, however introduces some
new terms specific to =telega=.  All of them are used in the manual.

- Root Buffer a.k.a. rootbuf ::
  Buffer with list of chats, you see it just after {{{kbd(M-x telega RET)}}}.
  Most of the time rootbuf term is used in the manual.
  See [[#root-buffer][Root Buffer]]

- Root View ::
  Root Buffer can be shown in different ways.  Way rootbuf is shown is
  called root view.
  See [[#root-buffer][Root Buffer]]

- Chat Buffer a.k.a. chatbuf ::
  Buffer with chat contents.
  See [[#chat-buffer][Chat Buffer]]

- Button ::
  Ordinary Emacs Button (see =button.el=).  Some outlined area with
  text, that can be acted on.  Pressing {{{kbd(RET)}}} on the
  button, executes button action.  There are many buttons of different
  kind in =telega=

- Chat Button ::
  Button referring to some chat.  Action for such button is to open
  corresponding chatbuf.

  rootbuf lists the chat buttons, such as:
  #+begin_example
  {🎗Saved Messages            }📌  📹 Video (10s)               Fri✓
  [Emacs | Emacs (english)     ]  @oldosfan: same                Fri
  ...
  #+end_example

- Temex ::
  Telega Match Expression - S-expression to match telega objects such
  as chats or messages.
  See [[#telega-match-expressions][Telega Match Expressions]] for the details.

- [Custom] Chat Filter ::
  Named temex to filter chats in the rootbuf.

  Custom chat filters are displayed as buttons above the chat list in
  the rootbuf, such as:
  #+begin_example
  [243:📑Main      4890]  [51:Groups       4677]  [27:Channels      210]
  [53:Contacts         ]  [0:Important         ]  [3:📑Archive      670]
  #+end_example

  Action for such buttons is to add corresponding temex to the
  active chat filter.

  However, buttons that corresponds to a Telegram Folder, including
  "Main" and "Archive", substitutes folder in the active chat filter
  with new one at button.

  + {{{user-option(telega-filter-button-width, 4)}}}
  + {{{user-option(telega-filters-custom, 4)}}}
  + {{{user-option(telega-filter-custom-expand, 4)}}}
  + {{{user-option(telega-filter-custom-show-folders, 4)}}}

- Active Chat Filter ::
  List of chat temexes applied to the chat list in rootbuf.

  Only chats matching **all** temexes in the active chat filter
  are displayed in rootbuf.  Active chat filter is displayed above the
  chat list in rootbuf, such as:
  #+begin_example
  -/------------------------------(main)--------------------------------
  #+end_example

  ~(telega-filter-active)~ returns active chat filter.

  - {{{user-option(telega-filter-default, 4)}}}

- Chat Sort Criteria ::
  List of symbols denoting how to sort chats.
  See [[#sorting-chats][Sorting Chats]]

- Active Sort Criteria a.k.a. active sorter ::
  Sort criteria applied to the chat list in rootbuf.

  By default, chats are sorted according to internal Telegram order
  (except for chats with custom order).

  In case active sorter is enabled, it is displayed above the chat
  list in rootbuf, such as:
  #+begin_example
  -\---------------------(unread-count join-date)-----------------------
  #+end_example

- Me user a.k.a. me ::
  User currently logged in, ~(telega-user-me)~ returns me.

  me means you, not me.

  Chat with me is also known as "Saved Messages".

* Telega prefix map

=telega= has prefix map for common =telega= commands, such as
switching to rootbuf, switch to "Saved Messages", sending current
buffer as file to a chat, switching accounts, opening chat or
switching to some chat.

It is convenient to have it somewhere accessible from ~global-map~,
say {{{kbd(C-c t)}}}.  To do so use next code in your =init.el=:

#+begin_src
(define-key global-map (kbd "C-c t") telega-prefix-map)
#+end_src

Or if =telega= is not accessible to autoload at start time, then use:

#+begin_src
(add-hook 'telega-load-hook
          (lambda ()
            (define-key global-map (kbd "C-c t") telega-prefix-map)))
#+end_src

Telega prefix map bindings:

#+ELLIT-INCLUDE: ../telega.el :label prefix-map-bindings

* Root Buffer

#+ELLIT-INCLUDE: ../telega-root.el :label commentary

Important customizable options:
- {{{user-option(telega-root-fill-column, 2)}}}

  This option is applied only if [[#telega-root-auto-fill-mode][telega-root-auto-fill-mode]] is
  disabled.  Default behaviour is to automatically adjust
  ~telega-root-fill-column~ to the width of the window displaying
  rootbuf.

- {{{user-option(telega-root-keep-cursor, 2)}}}

** Rootbuf fast navigation

{{{kbd(M-g)}}} prefix in rootbuf is used to jump across chat buttons:

#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-fastnav-bindings

** Rootbuf view switching

Rootbuf view is the specific way how rootbuf is shown to the user.  By
default, list of the chats is shown, this is known as default root
view.

{{{kbd(v)}}} prefix in rootbuf is used to switch root views:
#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-view-bindings

Important customizable options:
- {{{user-option(telega-root-default-view-function, 2)}}}

  {{{where-is(telega-view-reset,telega-root-mode-map)}}} uses this
  function to reset root view.

** Voice/Video calls

Telegram provides nice voice/video calls.

**TODO** more documentation about voice/video calls support by
=telega=.

{{{kbd(c)}}} prefix in rootbuf is used to call VoIP commands:
#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-voip-bindings

* Telega Match Expressions

#+ELLIT-INCLUDE: ../telega-match.el :label commentary

List of temexes you can apply to any TDLib object:

#+ELLIT-INCLUDE: ../telega-match.el :label temex

** List of Chat Temexes

Use ~telega-chat-match-p~ to match a chat.

#+ELLIT-INCLUDE: ../telega-match.el :label chat-temex

** List of Message Temexes

Use ~telega-msg-match-p~ to match a message.

#+ELLIT-INCLUDE: ../telega-match.el :label msg-temex

** List of User Temexes

Use ~telega-user-match-p~ to match a user.

#+ELLIT-INCLUDE: ../telega-match.el :label user-temex

** List of Message Sender Temexes

Use ~telega-sender-match-p~ to match a message sender.

#+ELLIT-INCLUDE: ../telega-match.el :label sender-temex

** Customizable options making use of Telega Match Expressions

- {{{user-option(telega-filter-default, 2)}}}
- {{{user-option(telega-filters-custom, 2)}}}
- {{{user-option(telega-use-tracking-for, 2)}}}
- {{{user-option(telega-rainbow-color-custom-for, 2)}}}
- {{{user-option(telega-chat-prompt-format, 2)}}}
- {{{user-option(telega-chat-group-messages-for, 2)}}}
- {{{user-option(telega-chat-show-deleted-messages-for, 2)}}}
- {{{user-option(telega-chat-use-date-breaks-for, 2)}}}
- {{{user-option(telega-root-view-topics, 2)}}}

* Chat Folders

#+ELLIT-INCLUDE: ../telega-folders.el :label commentary

{{{kbd(F)}}} prefix in rootbuf is used to operate on Chat Folders:
#+ELLIT-INCLUDE: ../telega-root.el :label rootbuf-folder-bindings

Customizable options for Chat Folders:
#+ELLIT-INCLUDE: ../telega-customize.el :label folders-options

* Filtering chats

#+ELLIT-INCLUDE: ../telega-filter.el :label commentary

{{{kbd(/)}}} prefix in rootbuf is used for some useful filtering
commands:

- {{{where-is(telega-filter-by-important,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-important, 2)}}}
- {{{where-is(telega-filter-by-online-status,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-online-status, 2)}}}
- {{{where-is(telega-filter-by-filter,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filter-by-filter, 2)}}}
- {{{where-is(telega-filters-edit,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-edit, 2)}}}
- {{{where-is(telega-filters-pop-last,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-pop-last, 2)}}}
- {{{where-is(telega-filters-negate,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-negate, 2)}}}
- {{{where-is(telega-filters-reset,telega-root-mode-map)}}} ::
  {{{fundoc(telega-filters-reset, 2)}}}

For other chat filtering bindings see [[#list-of-chat-temexes][List of Chat Temexes]]

* Sorting chats

#+ELLIT-INCLUDE: ../telega-sort.el :label commentary

{{{kbd(\)}}} prefix in rootbuf is used for sorting commands:

- {{{where-is(telega-sort-reset,telega-root-mode-map)}}} ::
  {{{fundoc(telega-sort-reset, 2)}}}

  It is possible to add multiple criteria using ~telega-sort-reset~
  with prefix argument {{{kbd(C-u)}}}.

- {{{where-is(telega-sort-by-sorter,telega-root-mode-map)}}} ::
  {{{fundoc(telega-sort-by-sorter, 2)}}}

  Use this command to reset active sorter.

For other sorting keybindings see below.

** Sorting criteria

#+ELLIT-INCLUDE: ../telega-sort.el :label chat-sorting-criteria

** Customizable options making use of sorting criteria

- {{{user-option(telega-chat-completing-sort-criteria, 2)}}}
- {{{user-option(telega-chat-switch-buffer-sort-criteria, 2)}}}

* Chat buffer

#+ELLIT-INCLUDE: ../telega-chat.el :label commentary

Important customizable options:
- {{{user-option(telega-chat-fill-column, 2)}}}
- {{{user-option(telega-chat-use-date-breaks-for, 2)}}}

** Chatbuf fast navigation

{{{kbd(M-g)}}} prefix in chatbuf is used to jump across various chat
messages:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-fastnav-bindings

** Sending ordinary messages

Type a text in the chatbuf input and press {{{kbd(RET)}}} to send the
message.  To insert newline in the middle of the input use ordinary
{{{kbd(C-j)}}} Emacs command.

You can apply markup to the input when sending message.  This is
controlled by number of {{{kbd(C-u)}}} pressed before {{{kbd(RET)}}}
and value of the:
- {{{user-option(telega-chat-input-markups, 2)}}}

Markup syntax table:
|                  | markdown2                        | org                                | markdown1                        |
|------------------+----------------------------------+------------------------------------+----------------------------------|
| *bold text*      | ~**bold text**~                  | ~*bold text*~                      | ~*bold text*~                    |
| /italic text/    | ~__italic text__~                | ~/italic text/~                    | ~_italic text_~                  |
| _underline text_ | ~__underline text__~             | ~_underline text_~                 | **UNSUPPORTED**                  |
| +strike through+ | ~~strike through~~               | ~+strike through+~                 | **UNSUPPORTED**                  |
|                  | ~¦¦spoiler¦¦~                    | ~¦¦spoiler¦¦~                      | **UNSUPPORTED**                  |
| ~inlined code~   | ~`inlined code`~                 | ~~inlined code~~                   | ~`inlined code`~                 |
| =pre text=       | ~```pre text```~                 | ~=pre text=~                       | **UNSUPPORTED**                  |
| [[http://www.url][text]]             | ~[text](http://www.url)~         | ~[[text][http://www.url]]~         | ~[text](http://www.url)~         |
| [[http://t.me/user][name]]             | ~[name](tg://user?id=<USER-ID>)~ | ~[[name][tg://user?id=<USER-ID>]]~ | ~[name](tg://user?id=<USER-ID>)~ |

There is also "markdown1" syntax to insert multiline code blocks of
specified languge:
#+begin_example
```<language-name>
first line of multiline preformatted code
second line
last line```
#+end_example

"markdown2" backquotes syntax to insert multiline code blocks is
controlled by:
- {{{user-option(telega-markdown2-backquotes-as-precode, 2)}}}

Org syntax for code blocks is **NOT YET** supported:
#+begin_example
#+begin_src <language-name>
code line
next code line
...
#+end_src
#+end_example

Also, you can intermix various markups, using {{{kbd(C-c C-a markup
RET)}}} command.

Important customizable options:
- {{{user-option1(telega-chat-input-markups,2)}}}
- {{{user-option(telega-chat-ret-always-sends-message,2)}}}
- {{{user-option1(telega-chat-markup-functions,2)}}}

** Attaching media

You can attach various media into chatbuf input, using next bindings:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-attach-bindings

Text following attached media will be a media caption.

Attachment types to attach with
{{{where-is(telega-chatbuf-attach,telega-chat-mode-map)}}} defined in
~telega-chat-attach-commands~ user option:
{{{eval((mapconcat (lambda (ac)
(concat "- " (nth 0 ac) " :: " (ellit-org-template-fundoc (nth 2 ac) "2")
(when (nth 3 ac) (concat "\n" (nth 3 ac) "\n"))))
telega-chat-attach-commands "\n"),t)}}}

Special attachment types are =disable-webpage-preview=, =scheduled=,
=disable-notification= or =enable-notification=.  They do not attach
anything, but changes options on how to send the message.  Use
=scheduled= to [[#scheduling-messages-and-reminders][schedule messages]], =disable-notification= or
=enable-notification= to trigger notification on receiver side and
=disable-webpage-preview= to disable rich web page previews for URLs
in the message text.

Customizable options for attaching media:
- {{{user-option(telega-chat-upload-attaches-ahead, 2)}}}
- {{{user-option(telega-chat-markup-functions, 2)}}}

** Replying and editing messages

To reply/edit the message, put point on the message you want to
reply/edit and press
{{{where-is(telega-msg-reply,telega-msg-button-map)}}} to reply or
{{{where-is(telega-msg-edit,telega-msg-button-map)}}} to edit.

Aux prompt will be show just above the chatbuf prompt, such as:
#+begin_example
[✕]| Reply: @demash> Trying to install telega  M-x packag…
(T)>>>
#+end_example

To cancel aux prompt press on the cross button, or use
{{{where-is(telega-chatbuf-cancel-aux,telega-chat-mode-map)}}}
binding.
{{{where-is(telega-chatbuf-cancel-aux,telega-chat-mode-map)}}} accepts
{{{kbd(C-u)}}} prefix, if used then chatbuf's input is also canceled.

To edit your previously sent message press
{{{where-is(telega-chatbuf-edit-prev,telega-chat-mode-map)}}}.

It is possible to edit a message using markup syntax.
{{{where-is(telega-msg-edit,telega-msg-button-map)}}} accepts
{{{kbd(C-u)}}} prefix to specify markup syntax to be used for editing.

** Forwarding messages

To forward a message, put cursor under the message which you want to
forward and press
{{{where-is(telega-msg-forward-marked-or-at-point,telega-msg-button-map)}}}
and then select a Chat to forward a message to.  To forward multiple
messages at once, mark messages with the
{{{where-is(telega-msg-mark-toggle,telega-msg-button-map)}}} and then
press
{{{where-is(telega-msg-forward-marked-or-at-point,telega-msg-button-map)}}}
on one of the messages.

There are few options how you can affect the way a message is forwarded:
1. {{{kbd(C-u f)}}} to forward a message copy, it will look like *you*
   sent a message.
2. {{{kbd(C-u C-u f)}}} To forward a message copy deleting or
   replacing caption it has.  Use this to forward media message with
   your own caption.

** Deleting messages

To delete a message, put cursor under the message you want to delete and press
{{{where-is(telega-msg-delete-marked-or-at-point,telega-msg-button-map)}}}.

As with [[#forwarding-messages][forwarding messages]], you can mark multiple messages to delete
with {{{where-is(telega-msg-mark-toggle,telega-msg-button-map)}}}.

Also, you can ban/report message sender (and delete all messages from
this sender in the chat) with
{{{where-is(telega-msg-ban-sender,telega-msg-button-map)}}} when
cursor is under the message.

=telega= can keep deleted messages visible until chatbuf is
killed. This is controlled using custom variable:

- {{{user-option(telega-chat-show-deleted-messages-for,2)}}}

For example, to show deleted messages in all chats except for "Saved
Messages", use next:
#+begin_src emacs-lisp
(setq telega-chat-show-deleted-messages-for '(not saved-messages))
#+end_src

** Scheduling messages and reminders

To schedule a message, press {{{kbd(C-c C-a scheduled RET)}}},
select date and time to schedule message at, type text of a message
and send it as always.

To reschedule a message, first list all scheduled messages in the chat
with {{{kbd(C-c / scheduled RET)}}}, then press
{{{where-is(telega-msg-edit,telega-msg-button-map)}}} on the message
you want to reschedule, remove previous "Schedule" attachment and add
a new one at the beginning.

Message scheduled in "Saved Messages" chat is called reminder.

Whenever a scheduled message or reminder is sent, you get a special
notification marked with a 📅, so you don't get caught off-guard by
messages you planned in the past.

** Navigating previous input

You can navigate your previous chatbuf input using commands:
- {{{where-is(telega-chatbuf-edit-prev,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-edit-prev,2)}}}
- {{{where-is(telega-chatbuf-edit-next,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-edit-next,2)}}}
- {{{where-is(telega-chatbuf-input-search,telega-chat-mode-map)}}} ::
  {{{fundoc(telega-chatbuf-input-search,2)}}}

  While searching input, you can use
  {{{where-is(telega-chatbuf--input-search-input-prev,telega-chatbuf--input-search-map)}}}
  and
  {{{where-is(telega-chatbuf--input-search-input-next,telega-chatbuf--input-search-map)}}}
  to cycle chatbuf input ring.

** Completing input in chatbuf

Powerful =company-mode= can be used to complete input in the chatbuf
with
{{{where-is(telega-chatbuf-complete-or-next-link,telega-chat-mode-map)}}}.

=telega= provides few company backends, such as:

#+ELLIT-INCLUDE: ../telega-company.el :label company-backends

=company-mode= setup might look like:
#+begin_src elisp
(setq telega-emoji-company-backend 'telega-company-emoji)

(defun my-telega-chat-mode ()
  (set (make-local-variable 'company-backends)
       (append (list telega-emoji-company-backend
                     'telega-company-username
                     'telega-company-hashtag
                     'telega-company-markdown-precode)
               (when (telega-chat-bot-p telega-chatbuf--chat)
                 '(telega-company-botcmd))))
  (company-mode 1))

(add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

Consider also using =company-posframe= Emacs package (in MELPA), so
chatbuf's contents remain untouched when completion menu pops above
the chatbuf prompt.

If you don't like =company-posframe=, consider option:
- {{{user-option(telega-company-tooltip-always-below, 2)}}}

*** Using capf for input completions

It is possible to use standard Emacs ~capf~ (completion at point)
functionality to perform completions in the chatbuf.  You still need
~company.el~ package installed **and loaded** because =telega= uses it
as engine.

~capf~ is used by default if ~company-mode~ is disabled in the
chatbuf, so to enable ~capf~ completions setup could look like:

#+begin_src elisp
(defun my-telega-chat-mode ()
  (require 'company)
  (add-hook 'completion-at-point-functions
            #'telega-chatbuf-complete-at-point nil 'local)
  )

(add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)
#+end_src

~capf~ functionality is very limited comparing to ~company-mode~
completions, however, some users might still prefer ~capf~.

** Sending messages via bots

If chatbuf input starts with =@<botname> <query>= and mentioned bot
support [[https://telegram.org/blog/inline-bots][inline mode]], then pressing
{{{where-is(telega-chatbuf-complete-or-next-link,telega-chat-mode-map)}}}
will pop a special buffer with the inline results to the bot inline
~<query>~, you can use these results to send a message via bot.  Some
useful bots with [[https://telegram.org/blog/inline-bots][inline mode]] support are:

- [[https://t.me/gif][@gif]] To search and send animations
- [[https://t.me/pic][@pic]], [[https://t.me/bing][@bing]] To search and send pictures
- [[https://t.me/vid][@vid]] To search and send videos on YouTube
- [[https://t.me/foursquare][@foursquare]] - To find and send places around the world
- etc

To find out is some bot supports [[https://telegram.org/blog/inline-bots][inline mode]] or not, enter
~@<botname><SPC>~ in chatbuf input and press
{{{where-is(telega-chatbuf-complete-or-next-link,telega-chat-mode-map)}}}.
If momentary help is displayed, then this bot supports inline mode.

Customizable options for inline bots:
#+ELLIT-INCLUDE: ../telega-customize.el :label inline-bot-options

** Filtering chat messages a.k.a. Shared Media

Message filtering means to show only some messages matching filter.
Available message filters are: {{{eval((mapconcat (lambda (mf) (concat
"=" (car mf) "=")) telega-chat--message-filters "\, "),t)}}}

Chatbuf uses next bindings for message filtering:
#+ELLIT-INCLUDE: ../telega-chat.el :label chatbuf-filtering-bindings

** Opening files using external programs

Document messages in Telegram has attached file in the message.  By
default =telega= opens that files inside Emacs using {{{eval((format
"~%S~" telega-open-file-function),t)}}} function.  Sometimes that is not
desirable behaviour and you might want to open some files in external
application.  You can use ~org-open-file~ function for this.
Behaviour is controlled by:
- {{{user-option(telega-open-file-function, 2)}}}

Setup to open some files in external applications might look like:
#+begin_src emacslisp
;; ("\\.pdf\\'" . default) is already member in `org-file-apps'
;; Use "xdg-open" to open files by default
(setcdr (assq t org-file-apps-gnu) 'browse-url-xdg-open)

(setq telega-open-file-function 'org-open-file)
#+end_src

On MacOS use ~browse-url-default-macosx-browser~ instead of
~browse-url-xdg-open~.

If you also want to open non-document messages as file using
~telega-open-file-function~ consider:
- {{{user-option(telega-open-message-as-file, 2)}}}

Another alternative to open some files using external programs is to
use nice =openwith= Emacs package available in MELPA.

*Browse URL with custom function*

Also, you can open urls using custom functions:
- {{{user-option(telega-browse-url-alist, 2)}}}

For example, to play youtube videos using =mpv= player, add this to config:
#+begin_src emacs-lisp
(defun my-watch-in-mpv (url)
  (async-shell-command (format "mpv -v %S" url)))

(add-to-list 'telega-browse-url-alist
             '("https?://\\(www\\.\\)?youtube.com/watch" . my-watch-in-mpv))
(add-to-list 'telega-browse-url-alist
             '("https?://youtu.be/" . my-watch-in-mpv))
#+end_src

** Client side messages ignoring

In official telegram clients all messages in group chats are displayed
even if message has been sent by blocked sender (user or chat).
=telega= has client side message ignoring feature implemented.
Ignoring messages can be done by adding function into
~telega-msg-ignore-predicates~.  This function must accept single
argument - message, and return non-nil if messages should be ignored.
You can use ~telega-match-gen-predicate~ to generate message
predicates out of [[#telega-match-expressions][Telega Match Expressions]].
For example, to ignore messages from particular user with ~id=12345~
you could add next code:

#+begin_src emacs-lisp
(defun my-telega-ignore-12345-user (msg)
  (telega-msg-match-p msg '(sender (ids 12345))))

(add-hook 'telega-msg-ignore-predicates 'my-telega-ignore-12345-user)
#+end_src

Or to ignore messages from blocked senders (users or chats), just add:

#+begin_src emacs-lisp
(add-hook 'telega-msg-ignore-predicates
          (telega-match-gen-predicate 'msg '(sender blocked)))
#+end_src

To view recently ignored messages use
~M-x telega-ignored-messages RET~ command.

** Favorite messages

Any message in any chat can be marked with as /favorite/.  Favorite
messages are labeled with:
- {{{user-option(telega-symbol-favorite, 2)}}}

To toggle message at point being favorite, press
{{{where-is(telega-msg-favorite-toggle,telega-msg-button-map)}}}.

To jump to next favorite message in the chat buffer press
{{{where-is(telega-chatbuf-next-favorite,telega-chat-mode-map)}}}.

To view all favorite messages in all chats, enable "Favorite Messages"
Root View, by pressing
{{{where-is(telega-view-favorite-messages,telega-root-mode-map)}}} in
the [[#root-buffer][root buffer]].

** Media Controls for media messages

Some media messages that are playing inside Emacs (such as "audio",
"voice-note" or "video-note" messages) will have additional media
control buttons to control media playback parameters:
#+begin_example
[⏪] [⏩] [2×] [Stop] 
#+end_example

For fast access to media controls you can you next bindings:
- {{{where-is(telega-msg--vvnote-stop,telega-msg-button-map)}}} ::
  {{{fundoc(telega-msg--vvnote-stop,2)}}}
- {{{where-is(telega-msg--vvnote-rewind-10-backward,telega-msg-button-map)}}} ::
  {{{fundoc(telega-msg--vvnote-rewind-10-backward,2)}}}
- {{{where-is(telega-msg--vvnote-rewind-10-forward,telega-msg-button-map)}}} ::
  {{{fundoc(telega-msg--vvnote-rewind-10-forward,2)}}}
- {{{where-is(telega-msg--vvnote-play-speed-toggle,telega-msg-button-map)}}} ::
  {{{fundoc(telega-msg--vvnote-play-speed-toggle,2)}}}
- {{{where-is(telega-msg--vvnote-rewind-part,telega-msg-button-map)}}} ::
  {{{fundoc(telega-msg--vvnote-rewind-part,2)}}}

To play/pause media messages use {{{kbd(RET)}}}.  Also,
{{{where-is(telega-msg-copy-link,telega-msg-button-map)}}} command
supports linking to the currently playing (or paused at) moment.

To reference a given moment in a media message (or in a reply to media
message) use ~[HH:]MM:SS]~ syntax in the message's body/caption.  Such
timestamp marks will be automatically emphasised with a media
timestamp text entity.

* Video Chats

**TODO**: write me

* Stickers / Animations

To display stickers =telega= uses =dwebp= utility to convert ~.webp~
stickers into png images that can be displayed by Emacs. =dwebp=
utility is available on almost every system inside =webp= package.

Important customizable options for stickers:
- {{{user-option(telega-sticker-size, 2)}}}
- {{{user-option(telega-sticker-set-download, 2)}}}
- {{{user-option(telega-sticker-favorite-background, 2)}}}

To play short animations inside Emacs =telega= uses =ffmpeg= utility.
Playing animations inside Emacs is a bit heavy process, so be careful
in choosing value for the ~telega-animation-play-inline~.

Important customizable options for animations:
- {{{user-option(telega-animation-height, 2)}}}
- {{{user-option(telega-animation-play-inline, 2)}}}
- {{{user-option(telega-animation-download-saved, 2)}}}

** Animated stickers

=telega= supports animated stickers using =tgs2png= utility from
https://github.com/zevlg/tgs2png

Once =tgs2png= tool is installed into ~exec-path~ (check value for
~telega-sticker-animated-play~ after =telega= is started), you can
play animated stickers by pressing {{{kbd(RET)}}} on sticker.

Also [[#telega-autoplay-mode][telega-autoplay-mode]] can be used, to automatically animate
messages containing animated stickers.

** Favorite and recently used stickers

To attach your favorite or rencetly used sticker use {{{kbd(C-u)}}}
before {{{kbd(C-c C-a sticker RET)}}}.  Background for favorite
stickers are filled with color:
- {{{user-option(telega-sticker-favorite-background, 2)}}}

To toggle sticker being favorite, press
{{{where-is(telega-sticker-toggle-favorite,telega-sticker-button-map)}}}
while point is under sticker in the ~*Telega Sticker Set*~ buffer.

Or you can press {{{where-is(telega-msg-save,telega-msg-button-map)}}}
on the sticker message to add that sticker to the favorite stickers
list.

** Animations

There are multiple methods you can use to attach an animation:
- {{{kbd(C-c C-a animation RET)}}} to attach animation from the Saved
  Animations list.
- {{{kbd(C-c C-a gif RET)}}} to attach animation from a =gif= or =mp4=
  file.
- [[#sending-messages-via-bots][via @gif bot]]

To play animation message press {{{kbd(RET)}}} on the message.  Also,
[[#telega-autoplay-mode][telega-autoplay-mode]] can be used to automatically play animation
messages.

To explicitly add animation to Saved Animations list, press
{{{where-is(telega-msg-save,telega-msg-button-map)}}} on the
corresponding animation message.

* Multiple accounts

=telega= support multiple accounts, however only single account can be
active, i.e. you can't run account simultaneously, but you can switch
between accounts.  Notifications won't work for inactive accounts.

To switch accounts use
{{{where-is(telega-account-switch,telega-prefix-map)}}} from [[#telega-prefix-map][prefix
map]].  To setup multiple accounts use:

- {{{user-option(telega-accounts, 2)}}}

  For example:
  #+begin_src emacs-lisp
  (setq telega-accounts (list
    (list "zevlg" 'telega-database-dir telega-database-dir)
    (list "Evgen2" 'telega-database-dir
      (expand-file-name "evgen2" telega-database-dir))))
  #+end_src

  Each account can have its own configuration using custom variables
  specified in account setup, and only ~telega-database-dir~ must be
  different for different accounts.

  Uninitialized account from ~telega-accounts~ will be initialized when
  you switch to it for the first time.

* Minor Modes

=telega= ships with various minor modes you might consider to use.

** Notifications for incoming messages

#+ELLIT-INCLUDE: ../telega-notifications.el :label commentary

Message is triggered for messages matching:
- {{{user-option(telega-notifications-msg-temex, 2)}}}

You can use this option for custom notifications.  For example to
trigger notification for messages containing "keyword" (in addition to
default behaviour) you can set ~telega-notifications-msg-temex~ to
~(or (call telega-notifications-msg-notify-p) (contains "keyword"))~

By default notification triggers if
~telega-notifications-msg-notify-p~ predicate returns non-nil.  It
returns non-nil if next conditions are satisfied.

#+ELLIT-INCLUDE: ../telega-notifications.el :label notification-conditions

To view recent notifications use
~M-x telega-notifications-history RET~ command.

See also [[#telega-alertel--notifications-using-alertel][Notifications using alert.el]]

#+ELLIT-INCLUDE: ../telega-modes.el :label minor-modes

#+ELLIT-INCLUDE: ../telega-root.el :label minor-modes

#+ELLIT-INCLUDE: ../telega-voip.el :label minor-modes

* Contributed packages

=contrib/= directory contains packages contributed to =telega=
project.

#+ELLIT-INCLUDE: ../contrib/ol-telega.el

#+ELLIT-INCLUDE: ../contrib/telega-status-history.el

#+ELLIT-INCLUDE: ../contrib/telega-url-shorten.el

#+ELLIT-INCLUDE: ../contrib/telega-alert.el

#+ELLIT-INCLUDE: ../contrib/telega-dired-dwim.el

#+ELLIT-INCLUDE: ../contrib/telega-live-location.el :no-load t

#+ELLIT-INCLUDE: ../contrib/telega-mnz.el

#+ELLIT-INCLUDE: ../contrib/telega-dashboard.el

#+ELLIT-INCLUDE: ../contrib/telega-stories.el

#+ELLIT-INCLUDE: ../contrib/telega-transient.el

#+ELLIT-INCLUDE: ../contrib/telega-adblock.el

#+ELLIT-INCLUDE: ../contrib/telega-channels-export.el

#+ELLIT-INCLUDE: ../contrib/telega-bridge-bot.el

* Troubleshooting

** Can't compile =telega-server=
**TODO**

** Invalid TDLib version
**TODO**

** Stickers are not shown

**Q**: Stickers are not fully shown, I see only outlines for some
stickers, like on the screenshot:
[[file:https:/zevlg.github.io/telega/bad-stickers.jpg]]

**A**: =telega= uses =dwebp= tool to convert stickers in the WEBP
format to the format supported by Emacs.  See
[[#stickers--animations][Stickers / Animations]] for details.

** Notifications does not work

**Q**: I've enabled ~telega-notifications-mode~ as described in the
manual, but notifications still does not pop up.

**A**: Make sure your time is correct.  Eval ~(telega-time-seconds)~
to get UTC time in your Emacs, it should be more or less the same as
on https://www.unixtimestamp.com/


#  LocalWords:  customizable chatbuf tdlib gmake
